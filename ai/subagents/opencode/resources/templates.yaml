templates:
  architecture-template:
    template:
      id: architecture-template-v2
      name: Architecture Document
      version: 2.0
      output:
        format: markdown
        filename: docs/architecture.md
        title: '{{project_name}} Architecture Document'
    workflow:
      mode: interactive
      elicitation: advanced-elicitation
    sections:
    - id: introduction
      title: Introduction
      instruction: 'If available, review any provided relevant documents to gather
        all relevant context before beginning. If at a minimum you cannot locate docs/prd.md
        ask the user what docs will provide the basis for the architecture.

        '
      sections:
      - id: intro-content
        content: 'This document outlines the overall project architecture for {{project_name}},
          including backend systems, shared services, and non-UI specific concerns.
          Its primary goal is to serve as the guiding architectural blueprint for
          AI-driven development, ensuring consistency and adherence to chosen patterns
          and technologies.


          **Relationship to Frontend Architecture:**

          If the project includes a significant user interface, a separate Frontend
          Architecture Document will detail the frontend-specific design and MUST
          be used in conjunction with this document. Core technology stack choices
          documented herein (see "Tech Stack") are definitive for the entire project,
          including any frontend components.

          '
      - id: starter-template
        title: Starter Template or Existing Project
        instruction: "Before proceeding further with architecture design, check if\
          \ the project is based on a starter template or existing codebase:\n\n1.\
          \ Review the PRD and brainstorming brief for any mentions of:\n- Starter\
          \ templates (e.g., Create React App, Next.js, Vue CLI, Angular CLI, etc.)\n\
          - Existing projects or codebases being used as a foundation\n- Boilerplate\
          \ projects or scaffolding tools\n- Previous projects to be cloned or adapted\n\
          \n2. If a starter template or existing project is mentioned:\n- Ask the\
          \ user to provide access via one of these methods:\n  - Link to the starter\
          \ template documentation\n  - Upload/attach the project files (for small\
          \ projects)\n  - Share a link to the project repository (GitHub, GitLab,\
          \ etc.)\n- Analyze the starter/existing project to understand:\n  - Pre-configured\
          \ technology stack and versions\n  - Project structure and organization\
          \ patterns\n  - Built-in scripts and tooling\n  - Existing architectural\
          \ patterns and conventions\n  - Any limitations or constraints imposed by\
          \ the starter\n- Use this analysis to inform and align your architecture\
          \ decisions\n\n3. If no starter template is mentioned but this is a greenfield\
          \ project:\n- Suggest appropriate starter templates based on the tech stack\
          \ preferences\n- Explain the benefits (faster setup, best practices, community\
          \ support)\n- Let the user decide whether to use one\n\n4. If the user confirms\
          \ no starter template will be used:\n- Proceed with architecture design\
          \ from scratch\n- Note that manual setup will be required for all tooling\
          \ and configuration\n\nDocument the decision here before proceeding with\
          \ the architecture design. If none, just say N/A\n"
        elicit: true
      - id: changelog
        title: Change Log
        type: table
        columns:
        - Date
        - Version
        - Description
        - Author
        instruction: Track document versions and changes
    - id: high-level-architecture
      title: High Level Architecture
      instruction: 'This section contains multiple subsections that establish the
        foundation of the architecture. Present all subsections together at once.

        '
      elicit: true
      sections:
      - id: technical-summary
        title: Technical Summary
        instruction: 'Provide a brief paragraph (3-5 sentences) overview of:

          - The system''s overall architecture style

          - Key components and their relationships

          - Primary technology choices

          - Core architectural patterns being used

          - Reference back to the PRD goals and how this architecture supports them

          '
      - id: high-level-overview
        title: High Level Overview
        instruction: 'Based on the PRD''s Technical Assumptions section, describe:


          1. The main architectural style (e.g., Monolith, Microservices, Serverless,
          Event-Driven)

          2. Repository structure decision from PRD (Monorepo/Polyrepo)

          3. Service architecture decision from PRD

          4. Primary user interaction flow or data flow at a conceptual level

          5. Key architectural decisions and their rationale

          '
      - id: project-diagram
        title: High Level Project Diagram
        type: mermaid
        mermaid_type: graph
        instruction: 'Create a Mermaid diagram that visualizes the high-level architecture.
          Consider:

          - System boundaries

          - Major components/services

          - Data flow directions

          - External integrations

          - User entry points

          '
      - id: architectural-patterns
        title: Architectural and Design Patterns
        instruction: 'List the key high-level patterns that will guide the architecture.
          For each pattern:


          1. Present 2-3 viable options if multiple exist

          2. Provide your recommendation with clear rationale

          3. Get user confirmation before finalizing

          4. These patterns should align with the PRD''s technical assumptions and
          project goals


          Common patterns to consider:

          - Architectural style patterns (Serverless, Event-Driven, Microservices,
          CQRS, Hexagonal)

          - Code organization patterns (Dependency Injection, Repository, Module,
          Factory)

          - Data patterns (Event Sourcing, Saga, Database per Service)

          - Communication patterns (REST, GraphQL, Message Queue, Pub/Sub)

          '
        template: '- **{{pattern_name}}:** {{pattern_description}} - _Rationale:_
          {{rationale}}'
        examples:
        - '**Serverless Architecture:** Using AWS Lambda for compute - _Rationale:_
          Aligns with PRD requirement for cost optimization and automatic scaling'
        - '**Repository Pattern:** Abstract data access logic - _Rationale:_ Enables
          testing and future database migration flexibility'
        - '**Event-Driven Communication:** Using SNS/SQS for service decoupling -
          _Rationale:_ Supports async processing and system resilience'
    - id: tech-stack
      title: Tech Stack
      instruction: 'This is the DEFINITIVE technology selection section. Work with
        the user to make specific choices:


        1. Review PRD technical assumptions and any preferences from ../resources/data.md#technical-preferences
        or an attached technical-preferences

        2. For each category, present 2-3 viable options with pros/cons

        3. Make a clear recommendation based on project needs

        4. Get explicit user approval for each selection

        5. Document exact versions (avoid "latest" - pin specific versions)

        6. This table is the single source of truth - all other docs must reference
        these choices


        Key decisions to finalize - before displaying the table, ensure you are aware
        of or ask the user about - let the user know if they are not sure on any that
        you can also provide suggestions with rationale:


        - Starter templates (if any)

        - Languages and runtimes with exact versions

        - Frameworks and libraries / packages

        - Cloud provider and key services choices

        - Database and storage solutions - if unclear suggest sql or nosql or other
        types depending on the project and depending on cloud provider offer a suggestion

        - Development tools


        Upon render of the table, ensure the user is aware of the importance of this
        sections choices, should also look for gaps or disagreements with anything,
        ask for any clarifications if something is unclear why its in the list, and
        also right away elicit feedback - this statement and the options should be
        rendered and then prompt right all before allowing user input.

        '
      elicit: true
      sections:
      - id: cloud-infrastructure
        title: Cloud Infrastructure
        template: '- **Provider:** {{cloud_provider}}

          - **Key Services:** {{core_services_list}}

          - **Deployment Regions:** {{regions}}

          '
      - id: technology-stack-table
        title: Technology Stack Table
        type: table
        columns:
        - Category
        - Technology
        - Version
        - Purpose
        - Rationale
        instruction: Populate the technology stack table with all relevant technologies
        examples:
        - '| **Language** | TypeScript | 5.3.3 | Primary development language | Strong
          typing, excellent tooling, team expertise |'
        - '| **Runtime** | Node.js | 20.11.0 | JavaScript runtime | LTS version, stable
          performance, wide ecosystem |'
        - '| **Framework** | NestJS | 10.3.2 | Backend framework | Enterprise-ready,
          good DI, matches team patterns |'
    - id: data-models
      title: Data Models
      instruction: 'Define the core data models/entities:


        1. Review PRD requirements and identify key business entities

        2. For each model, explain its purpose and relationships

        3. Include key attributes and data types

        4. Show relationships between models

        5. Discuss design decisions with user


        Create a clear conceptual model before moving to database schema.

        '
      elicit: true
      repeatable: true
      sections:
      - id: model
        title: '{{model_name}}'
        template: '**Purpose:** {{model_purpose}}


          **Key Attributes:**

          - {{attribute_1}}: {{type_1}} - {{description_1}}

          - {{attribute_2}}: {{type_2}} - {{description_2}}


          **Relationships:**

          - {{relationship_1}}

          - {{relationship_2}}

          '
    - id: components
      title: Components
      instruction: 'Based on the architectural patterns, tech stack, and data models
        from above:


        1. Identify major logical components/services and their responsibilities

        2. Consider the repository structure (monorepo/polyrepo) from PRD

        3. Define clear boundaries and interfaces between components

        4. For each component, specify:

        - Primary responsibility

        - Key interfaces/APIs exposed

        - Dependencies on other components

        - Technology specifics based on tech stack choices


        5. Create component diagrams where helpful

        '
      elicit: true
      sections:
      - id: component-list
        repeatable: true
        title: '{{component_name}}'
        template: '**Responsibility:** {{component_description}}


          **Key Interfaces:**

          - {{interface_1}}

          - {{interface_2}}


          **Dependencies:** {{dependencies}}


          **Technology Stack:** {{component_tech_details}}

          '
      - id: component-diagrams
        title: Component Diagrams
        type: mermaid
        instruction: 'Create Mermaid diagrams to visualize component relationships.
          Options:

          - C4 Container diagram for high-level view

          - Component diagram for detailed internal structure

          - Sequence diagrams for complex interactions

          Choose the most appropriate for clarity

          '
    - id: external-apis
      title: External APIs
      condition: Project requires external API integrations
      instruction: 'For each external service integration:


        1. Identify APIs needed based on PRD requirements and component design

        2. If documentation URLs are unknown, ask user for specifics

        3. Document authentication methods and security considerations

        4. List specific endpoints that will be used

        5. Note any rate limits or usage constraints


        If no external APIs are needed, state this explicitly and skip to next section.

        '
      elicit: true
      repeatable: true
      sections:
      - id: api
        title: '{{api_name}} API'
        template: '- **Purpose:** {{api_purpose}}

          - **Documentation:** {{api_docs_url}}

          - **Base URL(s):** {{api_base_url}}

          - **Authentication:** {{auth_method}}

          - **Rate Limits:** {{rate_limits}}


          **Key Endpoints Used:**

          - `{{method}} {{endpoint_path}}` - {{endpoint_purpose}}


          **Integration Notes:** {{integration_considerations}}

          '
    - id: core-workflows
      title: Core Workflows
      type: mermaid
      mermaid_type: sequence
      instruction: 'Illustrate key system workflows using sequence diagrams:


        1. Identify critical user journeys from PRD

        2. Show component interactions including external APIs

        3. Include error handling paths

        4. Document async operations

        5. Create both high-level and detailed diagrams as needed


        Focus on workflows that clarify architecture decisions or complex interactions.

        '
      elicit: true
    - id: rest-api-spec
      title: REST API Spec
      condition: Project includes REST API
      type: code
      language: yaml
      instruction: 'If the project includes a REST API:


        1. Create an OpenAPI 3.0 specification

        2. Include all endpoints from epics/stories

        3. Define request/response schemas based on data models

        4. Document authentication requirements

        5. Include example requests/responses


        Use YAML format for better readability. If no REST API, skip this section.

        '
      elicit: true
      template: "openapi: 3.0.0\ninfo:\n  title: {{api_title}}\n  version: {{api_version}}\n\
        \  description: {{api_description}}\nservers:\n  - url: {{server_url}}\n \
        \   description: {{server_description}}\n"
    - id: database-schema
      title: Database Schema
      instruction: 'Transform the conceptual data models into concrete database schemas:


        1. Use the database type(s) selected in Tech Stack

        2. Create schema definitions using appropriate notation

        3. Include indexes, constraints, and relationships

        4. Consider performance and scalability

        5. For NoSQL, show document structures


        Present schema in format appropriate to database type (SQL DDL, JSON schema,
        etc.)

        '
      elicit: true
    - id: source-tree
      title: Source Tree
      type: code
      language: plaintext
      instruction: 'Create a project folder structure that reflects:


        1. The chosen repository structure (monorepo/polyrepo)

        2. The service architecture (monolith/microservices/serverless)

        3. The selected tech stack and languages

        4. Component organization from above

        5. Best practices for the chosen frameworks

        6. Clear separation of concerns


        Adapt the structure based on project needs. For monorepos, show service separation.
        For serverless, show function organization. Include language-specific conventions.

        '
      elicit: true
      examples:
      - "project-root/\n\u251C\u2500\u2500 packages/\n\u2502   \u251C\u2500\u2500\
        \ api/                    # Backend API service\n\u2502   \u251C\u2500\u2500\
        \ web/                    # Frontend application\n\u2502   \u251C\u2500\u2500\
        \ shared/                 # Shared utilities/types\n\u2502   \u2514\u2500\u2500\
        \ infrastructure/         # IaC definitions\n\u251C\u2500\u2500 scripts/ \
        \                   # Monorepo management scripts\n\u2514\u2500\u2500 package.json\
        \                # Root package.json with workspaces\n"
    - id: infrastructure-deployment
      title: Infrastructure and Deployment
      instruction: 'Define the deployment architecture and practices:


        1. Use IaC tool selected in Tech Stack

        2. Choose deployment strategy appropriate for the architecture

        3. Define environments and promotion flow

        4. Establish rollback procedures

        5. Consider security, monitoring, and cost optimization


        Get user input on deployment preferences and CI/CD tool choices.

        '
      elicit: true
      sections:
      - id: infrastructure-as-code
        title: Infrastructure as Code
        template: '- **Tool:** {{iac_tool}} {{version}}

          - **Location:** `{{iac_directory}}`

          - **Approach:** {{iac_approach}}

          '
      - id: deployment-strategy
        title: Deployment Strategy
        template: '- **Strategy:** {{deployment_strategy}}

          - **CI/CD Platform:** {{cicd_platform}}

          - **Pipeline Configuration:** `{{pipeline_config_location}}`

          '
      - id: environments
        title: Environments
        repeatable: true
        template: '- **{{env_name}}:** {{env_purpose}} - {{env_details}}'
      - id: promotion-flow
        title: Environment Promotion Flow
        type: code
        language: text
        template: '{{promotion_flow_diagram}}'
      - id: rollback-strategy
        title: Rollback Strategy
        template: '- **Primary Method:** {{rollback_method}}

          - **Trigger Conditions:** {{rollback_triggers}}

          - **Recovery Time Objective:** {{rto}}

          '
    - id: error-handling-strategy
      title: Error Handling Strategy
      instruction: 'Define comprehensive error handling approach:


        1. Choose appropriate patterns for the language/framework from Tech Stack

        2. Define logging standards and tools

        3. Establish error categories and handling rules

        4. Consider observability and debugging needs

        5. Ensure security (no sensitive data in logs)


        This section guides both AI and human developers in consistent error handling.

        '
      elicit: true
      sections:
      - id: general-approach
        title: General Approach
        template: '- **Error Model:** {{error_model}}

          - **Exception Hierarchy:** {{exception_structure}}

          - **Error Propagation:** {{propagation_rules}}

          '
      - id: logging-standards
        title: Logging Standards
        template: "- **Library:** {{logging_library}} {{version}}\n- **Format:** {{log_format}}\n\
          - **Levels:** {{log_levels_definition}}\n- **Required Context:**\n  - Correlation\
          \ ID: {{correlation_id_format}}\n  - Service Context: {{service_context}}\n\
          \  - User Context: {{user_context_rules}}\n"
      - id: error-patterns
        title: Error Handling Patterns
        sections:
        - id: external-api-errors
          title: External API Errors
          template: '- **Retry Policy:** {{retry_strategy}}

            - **Circuit Breaker:** {{circuit_breaker_config}}

            - **Timeout Configuration:** {{timeout_settings}}

            - **Error Translation:** {{error_mapping_rules}}

            '
        - id: business-logic-errors
          title: Business Logic Errors
          template: '- **Custom Exceptions:** {{business_exception_types}}

            - **User-Facing Errors:** {{user_error_format}}

            - **Error Codes:** {{error_code_system}}

            '
        - id: data-consistency
          title: Data Consistency
          template: '- **Transaction Strategy:** {{transaction_approach}}

            - **Compensation Logic:** {{compensation_patterns}}

            - **Idempotency:** {{idempotency_approach}}

            '
    - id: coding-standards
      title: Coding Standards
      instruction: 'These standards are MANDATORY for AI agents. Work with user to
        define ONLY the critical rules needed to prevent bad code. Explain that:


        1. This section directly controls AI developer behavior

        2. Keep it minimal - assume AI knows general best practices

        3. Focus on project-specific conventions and gotchas

        4. Overly detailed standards bloat context and slow development

        5. Standards will be extracted to separate file for dev agent use


        For each standard, get explicit user confirmation it''s necessary.

        '
      elicit: true
      sections:
      - id: core-standards
        title: Core Standards
        template: '- **Languages & Runtimes:** {{languages_and_versions}}

          - **Style & Linting:** {{linter_config}}

          - **Test Organization:** {{test_file_convention}}

          '
      - id: naming-conventions
        title: Naming Conventions
        type: table
        columns:
        - Element
        - Convention
        - Example
        instruction: Only include if deviating from language defaults
      - id: critical-rules
        title: Critical Rules
        instruction: 'List ONLY rules that AI might violate or project-specific requirements.
          Examples:

          - "Never use console.log in production code - use logger"

          - "All API responses must use ApiResponse wrapper type"

          - "Database queries must use repository pattern, never direct ORM"


          Avoid obvious rules like "use SOLID principles" or "write clean code"

          '
        repeatable: true
        template: '- **{{rule_name}}:** {{rule_description}}'
      - id: language-specifics
        title: Language-Specific Guidelines
        condition: Critical language-specific rules needed
        instruction: Add ONLY if critical for preventing AI mistakes. Most teams don't
          need this section.
        sections:
        - id: language-rules
          title: '{{language_name}} Specifics'
          repeatable: true
          template: '- **{{rule_topic}}:** {{rule_detail}}'
    - id: test-strategy
      title: Test Strategy and Standards
      instruction: 'Work with user to define comprehensive test strategy:


        1. Use test frameworks from Tech Stack

        2. Decide on TDD vs test-after approach

        3. Define test organization and naming

        4. Establish coverage goals

        5. Determine integration test infrastructure

        6. Plan for test data and external dependencies


        Note: Basic info goes in Coding Standards for dev agent. This detailed section
        is for QA agent and team reference.

        '
      elicit: true
      sections:
      - id: testing-philosophy
        title: Testing Philosophy
        template: '- **Approach:** {{test_approach}}

          - **Coverage Goals:** {{coverage_targets}}

          - **Test Pyramid:** {{test_distribution}}

          '
      - id: test-types
        title: Test Types and Organization
        sections:
        - id: unit-tests
          title: Unit Tests
          template: '- **Framework:** {{unit_test_framework}} {{version}}

            - **File Convention:** {{unit_test_naming}}

            - **Location:** {{unit_test_location}}

            - **Mocking Library:** {{mocking_library}}

            - **Coverage Requirement:** {{unit_coverage}}


            **AI Agent Requirements:**

            - Generate tests for all public methods

            - Cover edge cases and error conditions

            - Follow AAA pattern (Arrange, Act, Assert)

            - Mock all external dependencies

            '
        - id: integration-tests
          title: Integration Tests
          template: "- **Scope:** {{integration_scope}}\n- **Location:** {{integration_test_location}}\n\
            - **Test Infrastructure:**\n  - **{{dependency_name}}:** {{test_approach}}\
            \ ({{test_tool}})\n"
          examples:
          - '**Database:** In-memory H2 for unit tests, Testcontainers PostgreSQL
            for integration'
          - '**Message Queue:** Embedded Kafka for tests'
          - '**External APIs:** WireMock for stubbing'
        - id: e2e-tests
          title: End-to-End Tests
          template: '- **Framework:** {{e2e_framework}} {{version}}

            - **Scope:** {{e2e_scope}}

            - **Environment:** {{e2e_environment}}

            - **Test Data:** {{e2e_data_strategy}}

            '
      - id: test-data-management
        title: Test Data Management
        template: '- **Strategy:** {{test_data_approach}}

          - **Fixtures:** {{fixture_location}}

          - **Factories:** {{factory_pattern}}

          - **Cleanup:** {{cleanup_strategy}}

          '
      - id: continuous-testing
        title: Continuous Testing
        template: '- **CI Integration:** {{ci_test_stages}}

          - **Performance Tests:** {{perf_test_approach}}

          - **Security Tests:** {{security_test_approach}}

          '
    - id: security
      title: Security
      instruction: 'Define MANDATORY security requirements for AI and human developers:


        1. Focus on implementation-specific rules

        2. Reference security tools from Tech Stack

        3. Define clear patterns for common scenarios

        4. These rules directly impact code generation

        5. Work with user to ensure completeness without redundancy

        '
      elicit: true
      sections:
      - id: input-validation
        title: Input Validation
        template: "- **Validation Library:** {{validation_library}}\n- **Validation\
          \ Location:** {{where_to_validate}}\n- **Required Rules:**\n  - All external\
          \ inputs MUST be validated\n  - Validation at API boundary before processing\n\
          \  - Whitelist approach preferred over blacklist\n"
      - id: auth-authorization
        title: Authentication & Authorization
        template: "- **Auth Method:** {{auth_implementation}}\n- **Session Management:**\
          \ {{session_approach}}\n- **Required Patterns:**\n  - {{auth_pattern_1}}\n\
          \  - {{auth_pattern_2}}\n"
      - id: secrets-management
        title: Secrets Management
        template: "- **Development:** {{dev_secrets_approach}}\n- **Production:**\
          \ {{prod_secrets_service}}\n- **Code Requirements:**\n  - NEVER hardcode\
          \ secrets\n  - Access via configuration service only\n  - No secrets in\
          \ logs or error messages\n"
      - id: api-security
        title: API Security
        template: '- **Rate Limiting:** {{rate_limit_implementation}}

          - **CORS Policy:** {{cors_configuration}}

          - **Security Headers:** {{required_headers}}

          - **HTTPS Enforcement:** {{https_approach}}

          '
      - id: data-protection
        title: Data Protection
        template: '- **Encryption at Rest:** {{encryption_at_rest}}

          - **Encryption in Transit:** {{encryption_in_transit}}

          - **PII Handling:** {{pii_rules}}

          - **Logging Restrictions:** {{what_not_to_log}}

          '
      - id: dependency-security
        title: Dependency Security
        template: '- **Scanning Tool:** {{dependency_scanner}}

          - **Update Policy:** {{update_frequency}}

          - **Approval Process:** {{new_dep_process}}

          '
      - id: security-testing
        title: Security Testing
        template: '- **SAST Tool:** {{static_analysis}}

          - **DAST Tool:** {{dynamic_analysis}}

          - **Penetration Testing:** {{pentest_schedule}}

          '
    - id: checklist-results
      title: Checklist Results Report
      instruction: Before running the checklist, offer to output the full architecture
        document. Once user confirms, execute the architect-checklist and populate
        results here.
    - id: next-steps
      title: Next Steps
      instruction: 'After completing the architecture:


        1. If project has UI components:

        - Use "Frontend Architecture Mode"

        - Provide this document as input


        2. For all projects:

        - Review with Product Owner

        - Begin story implementation with Dev agent

        - Set up infrastructure with DevOps agent


        3. Include specific prompts for next agents if needed

        '
      sections:
      - id: architect-prompt
        title: Architect Prompt
        condition: Project has UI components
        instruction: 'Create a brief prompt to hand off to Architect for Frontend
          Architecture creation. Include:

          - Reference to this architecture document

          - Key UI requirements from PRD

          - Any frontend-specific decisions made here

          - Request for detailed frontend architecture

          '
  brainstorming-output-tmpl:
    template:
      id: brainstorming-output-template-v2
      name: Brainstorming Session Results
      version: 2.0
      output:
        format: markdown
        filename: docs/brainstorming-session-results.md
        title: Brainstorming Session Results
    workflow:
      mode: non-interactive
    sections:
    - id: header
      content: '**Session Date:** {{date}}

        **Facilitator:** {{agent_role}} {{agent_name}}

        **Participant:** {{user_name}}

        '
    - id: executive-summary
      title: Executive Summary
      sections:
      - id: summary-details
        template: '**Topic:** {{session_topic}}


          **Session Goals:** {{stated_goals}}


          **Techniques Used:** {{techniques_list}}


          **Total Ideas Generated:** {{total_ideas}}

          '
      - id: key-themes
        title: 'Key Themes Identified:'
        type: bullet-list
        template: '- {{theme}}'
    - id: technique-sessions
      title: Technique Sessions
      repeatable: true
      sections:
      - id: technique
        title: '{{technique_name}} - {{duration}}'
        sections:
        - id: description
          template: '**Description:** {{technique_description}}'
        - id: ideas-generated
          title: 'Ideas Generated:'
          type: numbered-list
          template: '{{idea}}'
        - id: insights
          title: 'Insights Discovered:'
          type: bullet-list
          template: '- {{insight}}'
        - id: connections
          title: 'Notable Connections:'
          type: bullet-list
          template: '- {{connection}}'
    - id: idea-categorization
      title: Idea Categorization
      sections:
      - id: immediate-opportunities
        title: Immediate Opportunities
        content: '*Ideas ready to implement now*'
        repeatable: true
        type: numbered-list
        template: '**{{idea_name}}**

          - Description: {{description}}

          - Why immediate: {{rationale}}

          - Resources needed: {{requirements}}

          '
      - id: future-innovations
        title: Future Innovations
        content: '*Ideas requiring development/research*'
        repeatable: true
        type: numbered-list
        template: '**{{idea_name}}**

          - Description: {{description}}

          - Development needed: {{development_needed}}

          - Timeline estimate: {{timeline}}

          '
      - id: moonshots
        title: Moonshots
        content: '*Ambitious, transformative concepts*'
        repeatable: true
        type: numbered-list
        template: '**{{idea_name}}**

          - Description: {{description}}

          - Transformative potential: {{potential}}

          - Challenges to overcome: {{challenges}}

          '
      - id: insights-learnings
        title: Insights & Learnings
        content: '*Key realizations from the session*'
        type: bullet-list
        template: '- {{insight}}: {{description_and_implications}}'
    - id: action-planning
      title: Action Planning
      sections:
      - id: top-priorities
        title: Top 3 Priority Ideas
        sections:
        - id: priority-1
          title: '#1 Priority: {{idea_name}}'
          template: '- Rationale: {{rationale}}

            - Next steps: {{next_steps}}

            - Resources needed: {{resources}}

            - Timeline: {{timeline}}

            '
        - id: priority-2
          title: '#2 Priority: {{idea_name}}'
          template: '- Rationale: {{rationale}}

            - Next steps: {{next_steps}}

            - Resources needed: {{resources}}

            - Timeline: {{timeline}}

            '
        - id: priority-3
          title: '#3 Priority: {{idea_name}}'
          template: '- Rationale: {{rationale}}

            - Next steps: {{next_steps}}

            - Resources needed: {{resources}}

            - Timeline: {{timeline}}

            '
    - id: reflection-followup
      title: Reflection & Follow-up
      sections:
      - id: what-worked
        title: What Worked Well
        type: bullet-list
        template: '- {{aspect}}'
      - id: areas-exploration
        title: Areas for Further Exploration
        type: bullet-list
        template: '- {{area}}: {{reason}}'
      - id: recommended-techniques
        title: Recommended Follow-up Techniques
        type: bullet-list
        template: '- {{technique}}: {{reason}}'
      - id: questions-emerged
        title: Questions That Emerged
        type: bullet-list
        template: '- {{question}}'
      - id: next-session
        title: Next Session Planning
        template: '- **Suggested topics:** {{followup_topics}}

          - **Recommended timeframe:** {{timeframe}}

          - **Preparation needed:** {{preparation}}

          '
    - id: footer
      content: '---


        *Session facilitated using the brainstorming framework*

        '
  brownfield-architecture-template:
    template:
      id: brownfield-architecture-template-v2
      name: Brownfield Enhancement Architecture
      version: 2.0
      output:
        format: markdown
        filename: docs/architecture.md
        title: '{{project_name}} Brownfield Enhancement Architecture'
    workflow:
      mode: interactive
      elicitation: advanced-elicitation
    sections:
    - id: introduction
      title: Introduction
      instruction: "IMPORTANT - SCOPE AND ASSESSMENT REQUIRED:\n\nThis architecture\
        \ document is for SIGNIFICANT enhancements to existing projects that require\
        \ comprehensive architectural planning. Before proceeding:\n\n1. **Verify\
        \ Complexity**: Confirm this enhancement requires architectural planning.\
        \ For simple additions, recommend: \"For simpler changes that don't require\
        \ architectural planning, consider using the brownfield-create-epic or brownfield-create-story\
        \ task with the Product Owner instead.\"\n\n2. **REQUIRED INPUTS**:\n   -\
        \ Completed prd.md\n   - Existing project technical documentation (from docs\
        \ folder or user-provided)\n   - Access to existing project structure (IDE\
        \ or uploaded files)\n\n3. **DEEP ANALYSIS MANDATE**: You MUST conduct thorough\
        \ analysis of the existing codebase, architecture patterns, and technical\
        \ constraints before making ANY architectural recommendations. Every suggestion\
        \ must be based on actual project analysis, not assumptions.\n\n4. **CONTINUOUS\
        \ VALIDATION**: Throughout this process, explicitly validate your understanding\
        \ with the user. For every architectural decision, confirm: \"Based on my\
        \ analysis of your existing system, I recommend [decision] because [evidence\
        \ from actual project]. Does this align with your system's reality?\"\n\n\
        If any required inputs are missing, request them before proceeding.\n"
      elicit: true
      sections:
      - id: intro-content
        content: 'This document outlines the architectural approach for enhancing
          {{project_name}} with {{enhancement_description}}. Its primary goal is to
          serve as the guiding architectural blueprint for AI-driven development of
          new features while ensuring seamless integration with the existing system.


          **Relationship to Existing Architecture:**

          This document supplements existing project architecture by defining how
          new components will integrate with current systems. Where conflicts arise
          between new and existing patterns, this document provides guidance on maintaining
          consistency while implementing enhancements.

          '
      - id: existing-project-analysis
        title: Existing Project Analysis
        instruction: 'Analyze the existing project structure and architecture:


          1. Review existing documentation in docs folder

          2. Examine current technology stack and versions

          3. Identify existing architectural patterns and conventions

          4. Note current deployment and infrastructure setup

          5. Document any constraints or limitations


          CRITICAL: After your analysis, explicitly validate your findings: "Based
          on my analysis of your project, I''ve identified the following about your
          existing system: [key findings]. Please confirm these observations are accurate
          before I proceed with architectural recommendations."

          '
        elicit: true
        sections:
        - id: current-state
          title: Current Project State
          template: '- **Primary Purpose:** {{existing_project_purpose}}

            - **Current Tech Stack:** {{existing_tech_summary}}

            - **Architecture Style:** {{existing_architecture_style}}

            - **Deployment Method:** {{existing_deployment_approach}}

            '
        - id: available-docs
          title: Available Documentation
          type: bullet-list
          template: '- {{existing_docs_summary}}'
        - id: constraints
          title: Identified Constraints
          type: bullet-list
          template: '- {{constraint}}'
      - id: changelog
        title: Change Log
        type: table
        columns:
        - Change
        - Date
        - Version
        - Description
        - Author
        instruction: Track document versions and changes
    - id: enhancement-scope
      title: Enhancement Scope and Integration Strategy
      instruction: 'Define how the enhancement will integrate with the existing system:


        1. Review the brownfield PRD enhancement scope

        2. Identify integration points with existing code

        3. Define boundaries between new and existing functionality

        4. Establish compatibility requirements


        VALIDATION CHECKPOINT: Before presenting the integration strategy, confirm:
        "Based on my analysis, the integration approach I''m proposing takes into
        account [specific existing system characteristics]. These integration points
        and boundaries respect your current architecture patterns. Is this assessment
        accurate?"

        '
      elicit: true
      sections:
      - id: enhancement-overview
        title: Enhancement Overview
        template: '**Enhancement Type:** {{enhancement_type}}

          **Scope:** {{enhancement_scope}}

          **Integration Impact:** {{integration_impact_level}}

          '
      - id: integration-approach
        title: Integration Approach
        template: '**Code Integration Strategy:** {{code_integration_approach}}

          **Database Integration:** {{database_integration_approach}}

          **API Integration:** {{api_integration_approach}}

          **UI Integration:** {{ui_integration_approach}}

          '
      - id: compatibility-requirements
        title: Compatibility Requirements
        template: '- **Existing API Compatibility:** {{api_compatibility}}

          - **Database Schema Compatibility:** {{db_compatibility}}

          - **UI/UX Consistency:** {{ui_compatibility}}

          - **Performance Impact:** {{performance_constraints}}

          '
    - id: tech-stack
      title: Tech Stack
      instruction: 'Ensure new components align with existing technology choices:


        1. Use existing technology stack as the foundation

        2. Only introduce new technologies if absolutely necessary

        3. Justify any new additions with clear rationale

        4. Ensure version compatibility with existing dependencies

        '
      elicit: true
      sections:
      - id: existing-stack
        title: Existing Technology Stack
        type: table
        columns:
        - Category
        - Current Technology
        - Version
        - Usage in Enhancement
        - Notes
        instruction: Document the current stack that must be maintained or integrated
          with
      - id: new-tech-additions
        title: New Technology Additions
        condition: Enhancement requires new technologies
        type: table
        columns:
        - Technology
        - Version
        - Purpose
        - Rationale
        - Integration Method
        instruction: Only include if new technologies are required for the enhancement
    - id: data-models
      title: Data Models and Schema Changes
      instruction: 'Define new data models and how they integrate with existing schema:


        1. Identify new entities required for the enhancement

        2. Define relationships with existing data models

        3. Plan database schema changes (additions, modifications)

        4. Ensure backward compatibility

        '
      elicit: true
      sections:
      - id: new-models
        title: New Data Models
        repeatable: true
        sections:
        - id: model
          title: '{{model_name}}'
          template: '**Purpose:** {{model_purpose}}

            **Integration:** {{integration_with_existing}}


            **Key Attributes:**

            - {{attribute_1}}: {{type_1}} - {{description_1}}

            - {{attribute_2}}: {{type_2}} - {{description_2}}


            **Relationships:**

            - **With Existing:** {{existing_relationships}}

            - **With New:** {{new_relationships}}

            '
      - id: schema-integration
        title: Schema Integration Strategy
        template: '**Database Changes Required:**

          - **New Tables:** {{new_tables_list}}

          - **Modified Tables:** {{modified_tables_list}}

          - **New Indexes:** {{new_indexes_list}}

          - **Migration Strategy:** {{migration_approach}}


          **Backward Compatibility:**

          - {{compatibility_measure_1}}

          - {{compatibility_measure_2}}

          '
    - id: component-architecture
      title: Component Architecture
      instruction: 'Define new components and their integration with existing architecture:


        1. Identify new components required for the enhancement

        2. Define interfaces with existing components

        3. Establish clear boundaries and responsibilities

        4. Plan integration points and data flow


        MANDATORY VALIDATION: Before presenting component architecture, confirm: "The
        new components I''m proposing follow the existing architectural patterns I
        identified in your codebase: [specific patterns]. The integration interfaces
        respect your current component structure and communication patterns. Does
        this match your project''s reality?"

        '
      elicit: true
      sections:
      - id: new-components
        title: New Components
        repeatable: true
        sections:
        - id: component
          title: '{{component_name}}'
          template: '**Responsibility:** {{component_description}}

            **Integration Points:** {{integration_points}}


            **Key Interfaces:**

            - {{interface_1}}

            - {{interface_2}}


            **Dependencies:**

            - **Existing Components:** {{existing_dependencies}}

            - **New Components:** {{new_dependencies}}


            **Technology Stack:** {{component_tech_details}}

            '
      - id: interaction-diagram
        title: Component Interaction Diagram
        type: mermaid
        mermaid_type: graph
        instruction: Create Mermaid diagram showing how new components interact with
          existing ones
    - id: api-design
      title: API Design and Integration
      condition: Enhancement requires API changes
      instruction: 'Define new API endpoints and integration with existing APIs:


        1. Plan new API endpoints required for the enhancement

        2. Ensure consistency with existing API patterns

        3. Define authentication and authorization integration

        4. Plan versioning strategy if needed

        '
      elicit: true
      sections:
      - id: api-strategy
        title: API Integration Strategy
        template: '**API Integration Strategy:** {{api_integration_strategy}}

          **Authentication:** {{auth_integration}}

          **Versioning:** {{versioning_approach}}

          '
      - id: new-endpoints
        title: New API Endpoints
        repeatable: true
        sections:
        - id: endpoint
          title: '{{endpoint_name}}'
          template: '- **Method:** {{http_method}}

            - **Endpoint:** {{endpoint_path}}

            - **Purpose:** {{endpoint_purpose}}

            - **Integration:** {{integration_with_existing}}

            '
          sections:
          - id: request
            title: Request
            type: code
            language: json
            template: '{{request_schema}}'
          - id: response
            title: Response
            type: code
            language: json
            template: '{{response_schema}}'
    - id: external-api-integration
      title: External API Integration
      condition: Enhancement requires new external APIs
      instruction: Document new external API integrations required for the enhancement
      repeatable: true
      sections:
      - id: external-api
        title: '{{api_name}} API'
        template: '- **Purpose:** {{api_purpose}}

          - **Documentation:** {{api_docs_url}}

          - **Base URL:** {{api_base_url}}

          - **Authentication:** {{auth_method}}

          - **Integration Method:** {{integration_approach}}


          **Key Endpoints Used:**

          - `{{method}} {{endpoint_path}}` - {{endpoint_purpose}}


          **Error Handling:** {{error_handling_strategy}}

          '
    - id: source-tree
      title: Source Tree
      instruction: 'Define how new code will integrate with existing project structure:


        1. Follow existing project organization patterns

        2. Identify where new files/folders will be placed

        3. Ensure consistency with existing naming conventions

        4. Plan for minimal disruption to existing structure

        '
      elicit: true
      sections:
      - id: existing-structure
        title: Existing Project Structure
        type: code
        language: plaintext
        instruction: Document relevant parts of current structure
        template: '{{existing_structure_relevant_parts}}'
      - id: new-file-organization
        title: New File Organization
        type: code
        language: plaintext
        instruction: Show only new additions to existing structure
        template: "{{project-root}}/\n\u251C\u2500\u2500 {{existing_structure_context}}\n\
          \u2502   \u251C\u2500\u2500 {{new_folder_1}}/           # {{purpose_1}}\n\
          \u2502   \u2502   \u251C\u2500\u2500 {{new_file_1}}\n\u2502   \u2502   \u2514\
          \u2500\u2500 {{new_file_2}}\n\u2502   \u251C\u2500\u2500 {{existing_folder}}/\
          \        # Existing folder with additions\n\u2502   \u2502   \u251C\u2500\
          \u2500 {{existing_file}}       # Existing file\n\u2502   \u2502   \u2514\
          \u2500\u2500 {{new_file_3}}          # New addition\n\u2502   \u2514\u2500\
          \u2500 {{new_folder_2}}/           # {{purpose_2}}\n"
      - id: integration-guidelines
        title: Integration Guidelines
        template: '- **File Naming:** {{file_naming_consistency}}

          - **Folder Organization:** {{folder_organization_approach}}

          - **Import/Export Patterns:** {{import_export_consistency}}

          '
    - id: infrastructure-deployment
      title: Infrastructure and Deployment Integration
      instruction: 'Define how the enhancement will be deployed alongside existing
        infrastructure:


        1. Use existing deployment pipeline and infrastructure

        2. Identify any infrastructure changes needed

        3. Plan deployment strategy to minimize risk

        4. Define rollback procedures

        '
      elicit: true
      sections:
      - id: existing-infrastructure
        title: Existing Infrastructure
        template: '**Current Deployment:** {{existing_deployment_summary}}

          **Infrastructure Tools:** {{existing_infrastructure_tools}}

          **Environments:** {{existing_environments}}

          '
      - id: enhancement-deployment
        title: Enhancement Deployment Strategy
        template: '**Deployment Approach:** {{deployment_approach}}

          **Infrastructure Changes:** {{infrastructure_changes}}

          **Pipeline Integration:** {{pipeline_integration}}

          '
      - id: rollback-strategy
        title: Rollback Strategy
        template: '**Rollback Method:** {{rollback_method}}

          **Risk Mitigation:** {{risk_mitigation}}

          **Monitoring:** {{monitoring_approach}}

          '
    - id: coding-standards
      title: Coding Standards
      instruction: 'Ensure new code follows existing project conventions:


        1. Document existing coding standards from project analysis

        2. Identify any enhancement-specific requirements

        3. Ensure consistency with existing codebase patterns

        4. Define standards for new code organization

        '
      elicit: true
      sections:
      - id: existing-standards
        title: Existing Standards Compliance
        template: '**Code Style:** {{existing_code_style}}

          **Linting Rules:** {{existing_linting}}

          **Testing Patterns:** {{existing_test_patterns}}

          **Documentation Style:** {{existing_doc_style}}

          '
      - id: enhancement-standards
        title: Enhancement-Specific Standards
        condition: New patterns needed for enhancement
        repeatable: true
        template: '- **{{standard_name}}:** {{standard_description}}'
      - id: integration-rules
        title: Critical Integration Rules
        template: '- **Existing API Compatibility:** {{api_compatibility_rule}}

          - **Database Integration:** {{db_integration_rule}}

          - **Error Handling:** {{error_handling_integration}}

          - **Logging Consistency:** {{logging_consistency}}

          '
    - id: testing-strategy
      title: Testing Strategy
      instruction: 'Define testing approach for the enhancement:


        1. Integrate with existing test suite

        2. Ensure existing functionality remains intact

        3. Plan for testing new features

        4. Define integration testing approach

        '
      elicit: true
      sections:
      - id: existing-test-integration
        title: Integration with Existing Tests
        template: '**Existing Test Framework:** {{existing_test_framework}}

          **Test Organization:** {{existing_test_organization}}

          **Coverage Requirements:** {{existing_coverage_requirements}}

          '
      - id: new-testing
        title: New Testing Requirements
        sections:
        - id: unit-tests
          title: Unit Tests for New Components
          template: '- **Framework:** {{test_framework}}

            - **Location:** {{test_location}}

            - **Coverage Target:** {{coverage_target}}

            - **Integration with Existing:** {{test_integration}}

            '
        - id: integration-tests
          title: Integration Tests
          template: '- **Scope:** {{integration_test_scope}}

            - **Existing System Verification:** {{existing_system_verification}}

            - **New Feature Testing:** {{new_feature_testing}}

            '
        - id: regression-tests
          title: Regression Testing
          template: '- **Existing Feature Verification:** {{regression_test_approach}}

            - **Automated Regression Suite:** {{automated_regression}}

            - **Manual Testing Requirements:** {{manual_testing_requirements}}

            '
    - id: security-integration
      title: Security Integration
      instruction: 'Ensure security consistency with existing system:


        1. Follow existing security patterns and tools

        2. Ensure new features don''t introduce vulnerabilities

        3. Maintain existing security posture

        4. Define security testing for new components

        '
      elicit: true
      sections:
      - id: existing-security
        title: Existing Security Measures
        template: '**Authentication:** {{existing_auth}}

          **Authorization:** {{existing_authz}}

          **Data Protection:** {{existing_data_protection}}

          **Security Tools:** {{existing_security_tools}}

          '
      - id: enhancement-security
        title: Enhancement Security Requirements
        template: '**New Security Measures:** {{new_security_measures}}

          **Integration Points:** {{security_integration_points}}

          **Compliance Requirements:** {{compliance_requirements}}

          '
      - id: security-testing
        title: Security Testing
        template: '**Existing Security Tests:** {{existing_security_tests}}

          **New Security Test Requirements:** {{new_security_tests}}

          **Penetration Testing:** {{pentest_requirements}}

          '
    - id: checklist-results
      title: Checklist Results Report
      instruction: Execute the architect-checklist and populate results here, focusing
        on brownfield-specific validation
    - id: next-steps
      title: Next Steps
      instruction: 'After completing the brownfield architecture:


        1. Review integration points with existing system

        2. Begin story implementation with Dev agent

        3. Set up deployment pipeline integration

        4. Plan rollback and monitoring procedures

        '
      sections:
      - id: story-manager-handoff
        title: Story Manager Handoff
        instruction: 'Create a brief prompt for Story Manager to work with this brownfield
          enhancement. Include:

          - Reference to this architecture document

          - Key integration requirements validated with user

          - Existing system constraints based on actual project analysis

          - First story to implement with clear integration checkpoints

          - Emphasis on maintaining existing system integrity throughout implementation

          '
      - id: developer-handoff
        title: Developer Handoff
        instruction: 'Create a brief prompt for developers starting implementation.
          Include:

          - Reference to this architecture and existing coding standards analyzed
          from actual project

          - Integration requirements with existing codebase validated with user

          - Key technical decisions based on real project constraints

          - Existing system compatibility requirements with specific verification
          steps

          - Clear sequencing of implementation to minimize risk to existing functionality

          '
  brownfield-prd-template:
    template:
      id: brownfield-prd-template-v2
      name: Brownfield Enhancement PRD
      version: 2.0
      output:
        format: markdown
        filename: docs/prd.md
        title: '{{project_name}} Brownfield Enhancement PRD'
    workflow:
      mode: interactive
      elicitation: advanced-elicitation
    sections:
    - id: intro-analysis
      title: Intro Project Analysis and Context
      instruction: 'IMPORTANT - SCOPE ASSESSMENT REQUIRED:


        This PRD is for SIGNIFICANT enhancements to existing projects that require
        comprehensive planning and multiple stories. Before proceeding:


        1. **Assess Enhancement Complexity**: If this is a simple feature addition
        or bug fix that could be completed in 1-2 focused development sessions, STOP
        and recommend: "For simpler changes, consider using the brownfield-create-epic
        or brownfield-create-story task with the Product Owner instead. This full
        PRD process is designed for substantial enhancements that require architectural
        planning and multiple coordinated stories."


        2. **Project Context**: Determine if we''re working in an IDE with the project
        already loaded or if the user needs to provide project information. If project
        files are available, analyze existing documentation in the docs folder. If
        insufficient documentation exists, recommend running the document-project
        task first.


        3. **Deep Assessment Requirement**: You MUST thoroughly analyze the existing
        project structure, patterns, and constraints before making ANY suggestions.
        Every recommendation must be grounded in actual project analysis, not assumptions.


        Gather comprehensive information about the existing project. This section
        must be completed before proceeding with requirements.


        CRITICAL: Throughout this analysis, explicitly confirm your understanding
        with the user. For every assumption you make about the existing project, ask:
        "Based on my analysis, I understand that [assumption]. Is this correct?"


        Do not proceed with any recommendations until the user has validated your
        understanding of the existing system.

        '
      sections:
      - id: existing-project-overview
        title: Existing Project Overview
        instruction: Check if document-project analysis was already performed. If
          yes, reference that output instead of re-analyzing.
        sections:
        - id: analysis-source
          title: Analysis Source
          instruction: 'Indicate one of the following:

            - Document-project output available at: {{path}}

            - IDE-based fresh analysis

            - User-provided information

            '
        - id: current-state
          title: Current Project State
          instruction: '- If document-project output exists: Extract summary from
            "High Level Architecture" and "Technical Summary" sections

            - Otherwise: Brief description of what the project currently does and
            its primary purpose

            '
      - id: documentation-analysis
        title: Available Documentation Analysis
        instruction: 'If document-project was run:

          - Note: "Document-project analysis available - using existing technical
          documentation"

          - List key documents created by document-project

          - Skip the missing documentation check below


          Otherwise, check for existing documentation:

          '
        sections:
        - id: available-docs
          title: Available Documentation
          type: checklist
          items:
          - Tech Stack Documentation [[LLM: "If from document-project, check \u2713\
              ]]"
          - Source Tree/Architecture [[LLM: "If from document-project, check \u2713\
              ]]"
          - Coding Standards [[LLM: If from document-project, may be partial]]
          - API Documentation [[LLM: "If from document-project, check \u2713]]"
          - External API Documentation [[LLM: "If from document-project, check \u2713\
              ]]"
          - UX/UI Guidelines [[LLM: May not be in document-project]]
          - Technical Debt Documentation [[LLM: "If from document-project, check \u2713\
              ]]"
          - 'Other: {{other_docs}}'
          instruction: '- If document-project was already run: "Using existing project
            analysis from document-project output."

            - If critical documentation is missing and no document-project: "I recommend
            running the document-project task first..."

            '
      - id: enhancement-scope
        title: Enhancement Scope Definition
        instruction: Work with user to clearly define what type of enhancement this
          is. This is critical for scoping and approach.
        sections:
        - id: enhancement-type
          title: Enhancement Type
          type: checklist
          instruction: Determine with user which applies
          items:
          - New Feature Addition
          - Major Feature Modification
          - Integration with New Systems
          - Performance/Scalability Improvements
          - UI/UX Overhaul
          - Technology Stack Upgrade
          - Bug Fix and Stability Improvements
          - 'Other: {{other_type}}'
        - id: enhancement-description
          title: Enhancement Description
          instruction: 2-3 sentences describing what the user wants to add or change
        - id: impact-assessment
          title: Impact Assessment
          type: checklist
          instruction: Assess the scope of impact on existing codebase
          items:
          - Minimal Impact (isolated additions)
          - Moderate Impact (some existing code changes)
          - Significant Impact (substantial existing code changes)
          - Major Impact (architectural changes required)
      - id: goals-context
        title: Goals and Background Context
        sections:
        - id: goals
          title: Goals
          type: bullet-list
          instruction: Bullet list of 1-line desired outcomes this enhancement will
            deliver if successful
        - id: background
          title: Background Context
          type: paragraphs
          instruction: 1-2 short paragraphs explaining why this enhancement is needed,
            what problem it solves, and how it fits with the existing project
      - id: changelog
        title: Change Log
        type: table
        columns:
        - Change
        - Date
        - Version
        - Description
        - Author
    - id: requirements
      title: Requirements
      instruction: 'Draft functional and non-functional requirements based on your
        validated understanding of the existing project. Before presenting requirements,
        confirm: "These requirements are based on my understanding of your existing
        system. Please review carefully and confirm they align with your project''s
        reality."

        '
      elicit: true
      sections:
      - id: functional
        title: Functional
        type: numbered-list
        prefix: FR
        instruction: Each Requirement will be a bullet markdown with identifier starting
          with FR
        examples:
        - 'FR1: The existing Todo List will integrate with the new AI duplicate detection
          service without breaking current functionality.'
      - id: non-functional
        title: Non Functional
        type: numbered-list
        prefix: NFR
        instruction: Each Requirement will be a bullet markdown with identifier starting
          with NFR. Include constraints from existing system
        examples:
        - 'NFR1: Enhancement must maintain existing performance characteristics and
          not exceed current memory usage by more than 20%.'
      - id: compatibility
        title: Compatibility Requirements
        instruction: Critical for brownfield - what must remain compatible
        type: numbered-list
        prefix: CR
        template: '{{requirement}}: {{description}}'
        items:
        - id: cr1
          template: 'CR1: {{existing_api_compatibility}}'
        - id: cr2
          template: 'CR2: {{database_schema_compatibility}}'
        - id: cr3
          template: 'CR3: {{ui_ux_consistency}}'
        - id: cr4
          template: 'CR4: {{integration_compatibility}}'
    - id: ui-enhancement-goals
      title: User Interface Enhancement Goals
      condition: Enhancement includes UI changes
      instruction: For UI changes, capture how they will integrate with existing UI
        patterns and design systems
      sections:
      - id: existing-ui-integration
        title: Integration with Existing UI
        instruction: Describe how new UI elements will fit with existing design patterns,
          style guides, and component libraries
      - id: modified-screens
        title: Modified/New Screens and Views
        instruction: List only the screens/views that will be modified or added
      - id: ui-consistency
        title: UI Consistency Requirements
        instruction: Specific requirements for maintaining visual and interaction
          consistency with existing application
    - id: technical-constraints
      title: Technical Constraints and Integration Requirements
      instruction: This section replaces separate architecture documentation. Gather
        detailed technical constraints from existing project analysis.
      sections:
      - id: existing-tech-stack
        title: Existing Technology Stack
        instruction: 'If document-project output available:

          - Extract from "Actual Tech Stack" table in High Level Architecture section

          - Include version numbers and any noted constraints


          Otherwise, document the current technology stack:

          '
        template: '**Languages**: {{languages}}

          **Frameworks**: {{frameworks}}

          **Database**: {{database}}

          **Infrastructure**: {{infrastructure}}

          **External Dependencies**: {{external_dependencies}}

          '
      - id: integration-approach
        title: Integration Approach
        instruction: Define how the enhancement will integrate with existing architecture
        template: '**Database Integration Strategy**: {{database_integration}}

          **API Integration Strategy**: {{api_integration}}

          **Frontend Integration Strategy**: {{frontend_integration}}

          **Testing Integration Strategy**: {{testing_integration}}

          '
      - id: code-organization
        title: Code Organization and Standards
        instruction: Based on existing project analysis, define how new code will
          fit existing patterns
        template: '**File Structure Approach**: {{file_structure}}

          **Naming Conventions**: {{naming_conventions}}

          **Coding Standards**: {{coding_standards}}

          **Documentation Standards**: {{documentation_standards}}

          '
      - id: deployment-operations
        title: Deployment and Operations
        instruction: How the enhancement fits existing deployment pipeline
        template: '**Build Process Integration**: {{build_integration}}

          **Deployment Strategy**: {{deployment_strategy}}

          **Monitoring and Logging**: {{monitoring_logging}}

          **Configuration Management**: {{config_management}}

          '
      - id: risk-assessment
        title: Risk Assessment and Mitigation
        instruction: 'If document-project output available:

          - Reference "Technical Debt and Known Issues" section

          - Include "Workarounds and Gotchas" that might impact enhancement

          - Note any identified constraints from "Critical Technical Debt"


          Build risk assessment incorporating existing known issues:

          '
        template: '**Technical Risks**: {{technical_risks}}

          **Integration Risks**: {{integration_risks}}

          **Deployment Risks**: {{deployment_risks}}

          **Mitigation Strategies**: {{mitigation_strategies}}

          '
    - id: epic-structure
      title: Epic and Story Structure
      instruction: 'For brownfield projects, favor a single comprehensive epic unless
        the user is clearly requesting multiple unrelated enhancements. Before presenting
        the epic structure, confirm: "Based on my analysis of your existing project,
        I believe this enhancement should be structured as [single epic/multiple epics]
        because [rationale based on actual project analysis]. Does this align with
        your understanding of the work required?"

        '
      elicit: true
      sections:
      - id: epic-approach
        title: Epic Approach
        instruction: Explain the rationale for epic structure - typically single epic
          for brownfield unless multiple unrelated features
        template: '**Epic Structure Decision**: {{epic_decision}} with rationale'
    - id: epic-details
      title: 'Epic 1: {{enhancement_title}}'
      instruction: 'Comprehensive epic that delivers the brownfield enhancement while
        maintaining existing functionality


        CRITICAL STORY SEQUENCING FOR BROWNFIELD:

        - Stories must ensure existing functionality remains intact

        - Each story should include verification that existing features still work

        - Stories should be sequenced to minimize risk to existing system

        - Include rollback considerations for each story

        - Focus on incremental integration rather than big-bang changes

        - Size stories for AI agent execution in existing codebase context

        - MANDATORY: Present the complete story sequence and ask: "This story sequence
        is designed to minimize risk to your existing system. Does this order make
        sense given your project''s architecture and constraints?"

        - Stories must be logically sequential with clear dependencies identified

        - Each story must deliver value while maintaining system integrity

        '
      template: '**Epic Goal**: {{epic_goal}}


        **Integration Requirements**: {{integration_requirements}}

        '
      sections:
      - id: story
        title: Story 1.{{story_number}} {{story_title}}
        repeatable: true
        template: 'As a {{user_type}},

          I want {{action}},

          so that {{benefit}}.

          '
        sections:
        - id: acceptance-criteria
          title: Acceptance Criteria
          type: numbered-list
          instruction: Define criteria that include both new functionality and existing
            system integrity
          item_template: '{{criterion_number}}: {{criteria}}'
        - id: integration-verification
          title: Integration Verification
          instruction: Specific verification steps to ensure existing functionality
            remains intact
          type: numbered-list
          prefix: IV
          items:
          - template: 'IV1: {{existing_functionality_verification}}'
          - template: 'IV2: {{integration_point_verification}}'
          - template: 'IV3: {{performance_impact_verification}}'
  competitor-analysis-tmpl:
    template:
      id: competitor-analysis-template-v2
      name: Competitive Analysis Report
      version: 2.0
      output:
        format: markdown
        filename: docs/competitor-analysis.md
        title: 'Competitive Analysis Report: {{project_product_name}}'
    workflow:
      mode: interactive
      elicitation: advanced-elicitation
      custom_elicitation:
        title: Competitive Analysis Elicitation Actions
        options:
        - Deep dive on a specific competitor's strategy
        - Analyze competitive dynamics in a specific segment
        - War game competitive responses to your moves
        - Explore partnership vs. competition scenarios
        - Stress test differentiation claims
        - Analyze disruption potential (yours or theirs)
        - Compare to competition in adjacent markets
        - Generate win/loss analysis insights
        - If only we had known about [competitor X's plan]...
        - Proceed to next section
    sections:
    - id: executive-summary
      title: Executive Summary
      instruction: Provide high-level competitive insights, main threats and opportunities,
        and recommended strategic actions. Write this section LAST after completing
        all analysis.
    - id: analysis-scope
      title: Analysis Scope & Methodology
      instruction: This template guides comprehensive competitor analysis. Start by
        understanding the user's competitive intelligence needs and strategic objectives.
        Help them identify and prioritize competitors before diving into detailed
        analysis.
      sections:
      - id: analysis-purpose
        title: Analysis Purpose
        instruction: 'Define the primary purpose:

          - New market entry assessment

          - Product positioning strategy

          - Feature gap analysis

          - Pricing strategy development

          - Partnership/acquisition targets

          - Competitive threat assessment

          '
      - id: competitor-categories
        title: Competitor Categories Analyzed
        instruction: 'List categories included:

          - Direct Competitors: Same product/service, same target market

          - Indirect Competitors: Different product, same need/problem

          - Potential Competitors: Could enter market easily

          - Substitute Products: Alternative solutions

          - Aspirational Competitors: Best-in-class examples

          '
      - id: research-methodology
        title: Research Methodology
        instruction: 'Describe approach:

          - Information sources used

          - Analysis timeframe

          - Confidence levels

          - Limitations

          '
    - id: competitive-landscape
      title: Competitive Landscape Overview
      sections:
      - id: market-structure
        title: Market Structure
        instruction: 'Describe the competitive environment:

          - Number of active competitors

          - Market concentration (fragmented/consolidated)

          - Competitive dynamics

          - Recent market entries/exits

          '
      - id: prioritization-matrix
        title: Competitor Prioritization Matrix
        instruction: 'Help categorize competitors by market share and strategic threat
          level


          Create a 2x2 matrix:

          - Priority 1 (Core Competitors): High Market Share + High Threat

          - Priority 2 (Emerging Threats): Low Market Share + High Threat

          - Priority 3 (Established Players): High Market Share + Low Threat

          - Priority 4 (Monitor Only): Low Market Share + Low Threat

          '
    - id: competitor-profiles
      title: Individual Competitor Profiles
      instruction: Create detailed profiles for each Priority 1 and Priority 2 competitor.
        For Priority 3 and 4, create condensed profiles.
      repeatable: true
      sections:
      - id: competitor
        title: '{{competitor_name}} - Priority {{priority_level}}'
        sections:
        - id: company-overview
          title: Company Overview
          template: '- **Founded:** {{year_founders}}

            - **Headquarters:** {{location}}

            - **Company Size:** {{employees_revenue}}

            - **Funding:** {{total_raised_investors}}

            - **Leadership:** {{key_executives}}

            '
        - id: business-model
          title: Business Model & Strategy
          template: '- **Revenue Model:** {{revenue_model}}

            - **Target Market:** {{customer_segments}}

            - **Value Proposition:** {{value_promise}}

            - **Go-to-Market Strategy:** {{gtm_approach}}

            - **Strategic Focus:** {{current_priorities}}

            '
        - id: product-analysis
          title: Product/Service Analysis
          template: '- **Core Offerings:** {{main_products}}

            - **Key Features:** {{standout_capabilities}}

            - **User Experience:** {{ux_assessment}}

            - **Technology Stack:** {{tech_stack}}

            - **Pricing:** {{pricing_model}}

            '
        - id: strengths-weaknesses
          title: Strengths & Weaknesses
          sections:
          - id: strengths
            title: Strengths
            type: bullet-list
            template: '- {{strength}}'
          - id: weaknesses
            title: Weaknesses
            type: bullet-list
            template: '- {{weakness}}'
        - id: market-position
          title: Market Position & Performance
          template: '- **Market Share:** {{market_share_estimate}}

            - **Customer Base:** {{customer_size_notables}}

            - **Growth Trajectory:** {{growth_trend}}

            - **Recent Developments:** {{key_news}}

            '
    - id: comparative-analysis
      title: Comparative Analysis
      sections:
      - id: feature-comparison
        title: Feature Comparison Matrix
        instruction: Create a detailed comparison table of key features across competitors
        type: table
        columns:
        - Feature Category
        - '{{your_company}}'
        - '{{competitor_1}}'
        - '{{competitor_2}}'
        - '{{competitor_3}}'
        rows:
        - category: Core Functionality
          items:
          - - Feature A
            - '{{status}}'
            - '{{status}}'
            - '{{status}}'
            - '{{status}}'
          - - Feature B
            - '{{status}}'
            - '{{status}}'
            - '{{status}}'
            - '{{status}}'
        - category: User Experience
          items:
          - - Mobile App
            - '{{rating}}'
            - '{{rating}}'
            - '{{rating}}'
            - '{{rating}}'
          - - Onboarding Time
            - '{{time}}'
            - '{{time}}'
            - '{{time}}'
            - '{{time}}'
        - category: Integration & Ecosystem
          items:
          - - API Availability
            - '{{availability}}'
            - '{{availability}}'
            - '{{availability}}'
            - '{{availability}}'
          - - Third-party Integrations
            - '{{number}}'
            - '{{number}}'
            - '{{number}}'
            - '{{number}}'
        - category: Pricing & Plans
          items:
          - - Starting Price
            - '{{price}}'
            - '{{price}}'
            - '{{price}}'
            - '{{price}}'
          - - Free Tier
            - '{{yes_no}}'
            - '{{yes_no}}'
            - '{{yes_no}}'
            - '{{yes_no}}'
      - id: swot-comparison
        title: SWOT Comparison
        instruction: Create SWOT analysis for your solution vs. top competitors
        sections:
        - id: your-solution
          title: Your Solution
          template: '- **Strengths:** {{strengths}}

            - **Weaknesses:** {{weaknesses}}

            - **Opportunities:** {{opportunities}}

            - **Threats:** {{threats}}

            '
        - id: vs-competitor
          title: vs. {{main_competitor}}
          template: '- **Competitive Advantages:** {{your_advantages}}

            - **Competitive Disadvantages:** {{their_advantages}}

            - **Differentiation Opportunities:** {{differentiation}}

            '
      - id: positioning-map
        title: Positioning Map
        instruction: 'Describe competitor positions on key dimensions


          Create a positioning description using 2 key dimensions relevant to the
          market, such as:

          - Price vs. Features

          - Ease of Use vs. Power

          - Specialization vs. Breadth

          - Self-Serve vs. High-Touch

          '
    - id: strategic-analysis
      title: Strategic Analysis
      sections:
      - id: competitive-advantages
        title: Competitive Advantages Assessment
        sections:
        - id: sustainable-advantages
          title: Sustainable Advantages
          instruction: 'Identify moats and defensible positions:

            - Network effects

            - Switching costs

            - Brand strength

            - Technology barriers

            - Regulatory advantages

            '
        - id: vulnerable-points
          title: Vulnerable Points
          instruction: 'Where competitors could be challenged:

            - Weak customer segments

            - Missing features

            - Poor user experience

            - High prices

            - Limited geographic presence

            '
      - id: blue-ocean
        title: Blue Ocean Opportunities
        instruction: 'Identify uncontested market spaces


          List opportunities to create new market space:

          - Underserved segments

          - Unaddressed use cases

          - New business models

          - Geographic expansion

          - Different value propositions

          '
    - id: strategic-recommendations
      title: Strategic Recommendations
      sections:
      - id: differentiation-strategy
        title: Differentiation Strategy
        instruction: 'How to position against competitors:

          - Unique value propositions to emphasize

          - Features to prioritize

          - Segments to target

          - Messaging and positioning

          '
      - id: competitive-response
        title: Competitive Response Planning
        sections:
        - id: offensive-strategies
          title: Offensive Strategies
          instruction: 'How to gain market share:

            - Target competitor weaknesses

            - Win competitive deals

            - Capture their customers

            '
        - id: defensive-strategies
          title: Defensive Strategies
          instruction: 'How to protect your position:

            - Strengthen vulnerable areas

            - Build switching costs

            - Deepen customer relationships

            '
      - id: partnership-ecosystem
        title: Partnership & Ecosystem Strategy
        instruction: 'Potential collaboration opportunities:

          - Complementary players

          - Channel partners

          - Technology integrations

          - Strategic alliances

          '
    - id: monitoring-plan
      title: Monitoring & Intelligence Plan
      sections:
      - id: key-competitors
        title: Key Competitors to Track
        instruction: Priority list with rationale
      - id: monitoring-metrics
        title: Monitoring Metrics
        instruction: 'What to track:

          - Product updates

          - Pricing changes

          - Customer wins/losses

          - Funding/M&A activity

          - Market messaging

          '
      - id: intelligence-sources
        title: Intelligence Sources
        instruction: 'Where to gather ongoing intelligence:

          - Company websites/blogs

          - Customer reviews

          - Industry reports

          - Social media

          - Patent filings

          '
      - id: update-cadence
        title: Update Cadence
        instruction: 'Recommended review schedule:

          - Weekly: {{weekly_items}}

          - Monthly: {{monthly_items}}

          - Quarterly: {{quarterly_analysis}}

          '
  front-end-architecture-template:
    template:
      id: frontend-architecture-template-v2
      name: Frontend Architecture Document
      version: 2.0
      output:
        format: markdown
        filename: docs/ui-architecture.md
        title: '{{project_name}} Frontend Architecture Document'
    workflow:
      mode: interactive
      elicitation: advanced-elicitation
    sections:
    - id: template-framework-selection
      title: Template and Framework Selection
      instruction: "Review provided documents including PRD, UX-UI Specification,\
        \ and main Architecture Document. Focus on extracting technical implementation\
        \ details needed for AI frontend tools and developer agents. Ask the user\
        \ for any of these documents if you are unable to locate and were not provided.\n\
        \nBefore proceeding with frontend architecture design, check if the project\
        \ is using a frontend starter template or existing codebase:\n\n1. Review\
        \ the PRD, main architecture document, and brainstorming brief for mentions\
        \ of:\n   - Frontend starter templates (e.g., Create React App, Next.js, Vite,\
        \ Vue CLI, Angular CLI, etc.)\n   - UI kit or component library starters\n\
        \   - Existing frontend projects being used as a foundation\n   - Admin dashboard\
        \ templates or other specialized starters\n   - Design system implementations\n\
        \n2. If a frontend starter template or existing project is mentioned:\n  \
        \ - Ask the user to provide access via one of these methods:\n     - Link\
        \ to the starter template documentation\n     - Upload/attach the project\
        \ files (for small projects)\n     - Share a link to the project repository\n\
        \   - Analyze the starter/existing project to understand:\n     - Pre-installed\
        \ dependencies and versions\n     - Folder structure and file organization\n\
        \     - Built-in components and utilities\n     - Styling approach (CSS modules,\
        \ styled-components, Tailwind, etc.)\n     - State management setup (if any)\n\
        \     - Routing configuration\n     - Testing setup and patterns\n     - Build\
        \ and development scripts\n   - Use this analysis to ensure your frontend\
        \ architecture aligns with the starter's patterns\n\n3. If no frontend starter\
        \ is mentioned but this is a new UI, ensure we know what the ui language and\
        \ framework is:\n   - Based on the framework choice, suggest appropriate starters:\n\
        \     - React: Create React App, Next.js, Vite + React\n     - Vue: Vue CLI,\
        \ Nuxt.js, Vite + Vue\n     - Angular: Angular CLI\n     - Or suggest popular\
        \ UI templates if applicable\n   - Explain benefits specific to frontend development\n\
        \n4. If the user confirms no starter template will be used:\n   - Note that\
        \ all tooling, bundling, and configuration will need manual setup\n   - Proceed\
        \ with frontend architecture from scratch\n\nDocument the starter template\
        \ decision and any constraints it imposes before proceeding.\n"
      sections:
      - id: changelog
        title: Change Log
        type: table
        columns:
        - Date
        - Version
        - Description
        - Author
        instruction: Track document versions and changes
    - id: frontend-tech-stack
      title: Frontend Tech Stack
      instruction: Extract from main architecture's Technology Stack Table. This section
        MUST remain synchronized with the main architecture document.
      elicit: true
      sections:
      - id: tech-stack-table
        title: Technology Stack Table
        type: table
        columns:
        - Category
        - Technology
        - Version
        - Purpose
        - Rationale
        instruction: Fill in appropriate technology choices based on the selected
          framework and project requirements.
        rows:
        - - Framework
          - '{{framework}}'
          - '{{version}}'
          - '{{purpose}}'
          - '{{why_chosen}}'
        - - UI Library
          - '{{ui_library}}'
          - '{{version}}'
          - '{{purpose}}'
          - '{{why_chosen}}'
        - - State Management
          - '{{state_management}}'
          - '{{version}}'
          - '{{purpose}}'
          - '{{why_chosen}}'
        - - Routing
          - '{{routing_library}}'
          - '{{version}}'
          - '{{purpose}}'
          - '{{why_chosen}}'
        - - Build Tool
          - '{{build_tool}}'
          - '{{version}}'
          - '{{purpose}}'
          - '{{why_chosen}}'
        - - Styling
          - '{{styling_solution}}'
          - '{{version}}'
          - '{{purpose}}'
          - '{{why_chosen}}'
        - - Testing
          - '{{test_framework}}'
          - '{{version}}'
          - '{{purpose}}'
          - '{{why_chosen}}'
        - - Component Library
          - '{{component_lib}}'
          - '{{version}}'
          - '{{purpose}}'
          - '{{why_chosen}}'
        - - Form Handling
          - '{{form_library}}'
          - '{{version}}'
          - '{{purpose}}'
          - '{{why_chosen}}'
        - - Animation
          - '{{animation_lib}}'
          - '{{version}}'
          - '{{purpose}}'
          - '{{why_chosen}}'
        - - Dev Tools
          - '{{dev_tools}}'
          - '{{version}}'
          - '{{purpose}}'
          - '{{why_chosen}}'
    - id: project-structure
      title: Project Structure
      instruction: Define exact directory structure for AI tools based on the chosen
        framework. Be specific about where each type of file goes. Generate a structure
        that follows the framework's best practices and conventions.
      elicit: true
      type: code
      language: plaintext
    - id: component-standards
      title: Component Standards
      instruction: Define exact patterns for component creation based on the chosen
        framework.
      elicit: true
      sections:
      - id: component-template
        title: Component Template
        instruction: Generate a minimal but complete component template following
          the framework's best practices. Include TypeScript types, proper imports,
          and basic structure.
        type: code
        language: typescript
      - id: naming-conventions
        title: Naming Conventions
        instruction: Provide naming conventions specific to the chosen framework for
          components, files, services, state management, and other architectural elements.
    - id: state-management
      title: State Management
      instruction: Define state management patterns based on the chosen framework.
      elicit: true
      sections:
      - id: store-structure
        title: Store Structure
        instruction: Generate the state management directory structure appropriate
          for the chosen framework and selected state management solution.
        type: code
        language: plaintext
      - id: state-template
        title: State Management Template
        instruction: Provide a basic state management template/example following the
          framework's recommended patterns. Include TypeScript types and common operations
          like setting, updating, and clearing state.
        type: code
        language: typescript
    - id: api-integration
      title: API Integration
      instruction: Define API service patterns based on the chosen framework.
      elicit: true
      sections:
      - id: service-template
        title: Service Template
        instruction: Provide an API service template that follows the framework's
          conventions. Include proper TypeScript types, error handling, and async
          patterns.
        type: code
        language: typescript
      - id: api-client-config
        title: API Client Configuration
        instruction: Show how to configure the HTTP client for the chosen framework,
          including authentication interceptors/middleware and error handling.
        type: code
        language: typescript
    - id: routing
      title: Routing
      instruction: Define routing structure and patterns based on the chosen framework.
      elicit: true
      sections:
      - id: route-configuration
        title: Route Configuration
        instruction: Provide routing configuration appropriate for the chosen framework.
          Include protected route patterns, lazy loading where applicable, and authentication
          guards/middleware.
        type: code
        language: typescript
    - id: styling-guidelines
      title: Styling Guidelines
      instruction: Define styling approach based on the chosen framework.
      elicit: true
      sections:
      - id: styling-approach
        title: Styling Approach
        instruction: Describe the styling methodology appropriate for the chosen framework
          (CSS Modules, Styled Components, Tailwind, etc.) and provide basic patterns.
      - id: global-theme
        title: Global Theme Variables
        instruction: Provide a CSS custom properties (CSS variables) theme system
          that works across all frameworks. Include colors, spacing, typography, shadows,
          and dark mode support.
        type: code
        language: css
    - id: testing-requirements
      title: Testing Requirements
      instruction: Define minimal testing requirements based on the chosen framework.
      elicit: true
      sections:
      - id: component-test-template
        title: Component Test Template
        instruction: Provide a basic component test template using the framework's
          recommended testing library. Include examples of rendering tests, user interaction
          tests, and mocking.
        type: code
        language: typescript
      - id: testing-best-practices
        title: Testing Best Practices
        type: numbered-list
        items:
        - '**Unit Tests**: Test individual components in isolation'
        - '**Integration Tests**: Test component interactions'
        - '**E2E Tests**: Test critical user flows (using Cypress/Playwright)'
        - '**Coverage Goals**: Aim for 80% code coverage'
        - '**Test Structure**: Arrange-Act-Assert pattern'
        - '**Mock External Dependencies**: API calls, routing, state management'
    - id: environment-configuration
      title: Environment Configuration
      instruction: List required environment variables based on the chosen framework.
        Show the appropriate format and naming conventions for the framework.
      elicit: true
    - id: frontend-developer-standards
      title: Frontend Developer Standards
      sections:
      - id: critical-coding-rules
        title: Critical Coding Rules
        instruction: List essential rules that prevent common AI mistakes, including
          both universal rules and framework-specific ones.
        elicit: true
      - id: quick-reference
        title: Quick Reference
        instruction: 'Create a framework-specific cheat sheet with:

          - Common commands (dev server, build, test)

          - Key import patterns

          - File naming conventions

          - Project-specific patterns and utilities

          '
  front-end-spec-tmpl:
    template:
      id: frontend-spec-template-v2
      name: UI/UX Specification
      version: 2.0
      output:
        format: markdown
        filename: docs/front-end-spec.md
        title: '{{project_name}} UI/UX Specification'
    workflow:
      mode: interactive
      elicitation: advanced-elicitation
    sections:
    - id: introduction
      title: Introduction
      instruction: 'Review provided documents including Project Brief, PRD, and any
        user research to gather context. Focus on understanding user needs, pain points,
        and desired outcomes before beginning the specification.


        Establish the document''s purpose and scope. Keep the content below but ensure
        project name is properly substituted.

        '
      content: 'This document defines the user experience goals, information architecture,
        user flows, and visual design specifications for {{project_name}}''s user
        interface. It serves as the foundation for visual design and frontend development,
        ensuring a cohesive and user-centered experience.

        '
      sections:
      - id: ux-goals-principles
        title: Overall UX Goals & Principles
        instruction: 'Work with the user to establish and document the following.
          If not already defined, facilitate a discussion to determine:


          1. Target User Personas - elicit details or confirm existing ones from PRD

          2. Key Usability Goals - understand what success looks like for users

          3. Core Design Principles - establish 3-5 guiding principles

          '
        elicit: true
        sections:
        - id: user-personas
          title: Target User Personas
          template: '{{persona_descriptions}}'
          examples:
          - '**Power User:** Technical professionals who need advanced features and
            efficiency'
          - '**Casual User:** Occasional users who prioritize ease of use and clear
            guidance'
          - '**Administrator:** System managers who need control and oversight capabilities'
        - id: usability-goals
          title: Usability Goals
          template: '{{usability_goals}}'
          examples:
          - 'Ease of learning: New users can complete core tasks within 5 minutes'
          - 'Efficiency of use: Power users can complete frequent tasks with minimal
            clicks'
          - 'Error prevention: Clear validation and confirmation for destructive actions'
          - 'Memorability: Infrequent users can return without relearning'
        - id: design-principles
          title: Design Principles
          template: '{{design_principles}}'
          type: numbered-list
          examples:
          - '**Clarity over cleverness** - Prioritize clear communication over aesthetic
            innovation'
          - '**Progressive disclosure** - Show only what''s needed, when it''s needed'
          - '**Consistent patterns** - Use familiar UI patterns throughout the application'
          - '**Immediate feedback** - Every action should have a clear, immediate
            response'
          - '**Accessible by default** - Design for all users from the start'
      - id: changelog
        title: Change Log
        type: table
        columns:
        - Date
        - Version
        - Description
        - Author
        instruction: Track document versions and changes
    - id: information-architecture
      title: Information Architecture (IA)
      instruction: 'Collaborate with the user to create a comprehensive information
        architecture:


        1. Build a Site Map or Screen Inventory showing all major areas

        2. Define the Navigation Structure (primary, secondary, breadcrumbs)

        3. Use Mermaid diagrams for visual representation

        4. Consider user mental models and expected groupings

        '
      elicit: true
      sections:
      - id: sitemap
        title: Site Map / Screen Inventory
        type: mermaid
        mermaid_type: graph
        template: '{{sitemap_diagram}}'
        examples:
        - "graph TD\n    A[Homepage] --> B[Dashboard]\n    A --> C[Products]\n   \
          \ A --> D[Account]\n    B --> B1[Analytics]\n    B --> B2[Recent Activity]\n\
          \    C --> C1[Browse]\n    C --> C2[Search]\n    C --> C3[Product Details]\n\
          \    D --> D1[Profile]\n    D --> D2[Settings]\n    D --> D3[Billing]\n"
      - id: navigation-structure
        title: Navigation Structure
        template: '**Primary Navigation:** {{primary_nav_description}}


          **Secondary Navigation:** {{secondary_nav_description}}


          **Breadcrumb Strategy:** {{breadcrumb_strategy}}

          '
    - id: user-flows
      title: User Flows
      instruction: 'For each critical user task identified in the PRD:


        1. Define the user''s goal clearly

        2. Map out all steps including decision points

        3. Consider edge cases and error states

        4. Use Mermaid flow diagrams for clarity

        5. Link to external tools (Figma/Miro) if detailed flows exist there


        Create subsections for each major flow.

        '
      elicit: true
      repeatable: true
      sections:
      - id: flow
        title: '{{flow_name}}'
        template: '**User Goal:** {{flow_goal}}


          **Entry Points:** {{entry_points}}


          **Success Criteria:** {{success_criteria}}

          '
        sections:
        - id: flow-diagram
          title: Flow Diagram
          type: mermaid
          mermaid_type: graph
          template: '{{flow_diagram}}'
        - id: edge-cases
          title: 'Edge Cases & Error Handling:'
          type: bullet-list
          template: '- {{edge_case}}'
        - id: notes
          template: '**Notes:** {{flow_notes}}'
    - id: wireframes-mockups
      title: Wireframes & Mockups
      instruction: 'Clarify where detailed visual designs will be created (Figma,
        Sketch, etc.) and how to reference them. If low-fidelity wireframes are needed,
        offer to help conceptualize layouts for key screens.

        '
      elicit: true
      sections:
      - id: design-files
        template: '**Primary Design Files:** {{design_tool_link}}'
      - id: key-screen-layouts
        title: Key Screen Layouts
        repeatable: true
        sections:
        - id: screen
          title: '{{screen_name}}'
          template: '**Purpose:** {{screen_purpose}}


            **Key Elements:**

            - {{element_1}}

            - {{element_2}}

            - {{element_3}}


            **Interaction Notes:** {{interaction_notes}}


            **Design File Reference:** {{specific_frame_link}}

            '
    - id: component-library
      title: Component Library / Design System
      instruction: 'Discuss whether to use an existing design system or create a new
        one. If creating new, identify foundational components and their key states.
        Note that detailed technical specs belong in front-end-architecture.

        '
      elicit: true
      sections:
      - id: design-system-approach
        template: '**Design System Approach:** {{design_system_approach}}'
      - id: core-components
        title: Core Components
        repeatable: true
        sections:
        - id: component
          title: '{{component_name}}'
          template: '**Purpose:** {{component_purpose}}


            **Variants:** {{component_variants}}


            **States:** {{component_states}}


            **Usage Guidelines:** {{usage_guidelines}}

            '
    - id: branding-style
      title: Branding & Style Guide
      instruction: Link to existing style guide or define key brand elements. Ensure
        consistency with company brand guidelines if they exist.
      elicit: true
      sections:
      - id: visual-identity
        title: Visual Identity
        template: '**Brand Guidelines:** {{brand_guidelines_link}}'
      - id: color-palette
        title: Color Palette
        type: table
        columns:
        - Color Type
        - Hex Code
        - Usage
        rows:
        - - Primary
          - '{{primary_color}}'
          - '{{primary_usage}}'
        - - Secondary
          - '{{secondary_color}}'
          - '{{secondary_usage}}'
        - - Accent
          - '{{accent_color}}'
          - '{{accent_usage}}'
        - - Success
          - '{{success_color}}'
          - Positive feedback, confirmations
        - - Warning
          - '{{warning_color}}'
          - Cautions, important notices
        - - Error
          - '{{error_color}}'
          - Errors, destructive actions
        - - Neutral
          - '{{neutral_colors}}'
          - Text, borders, backgrounds
      - id: typography
        title: Typography
        sections:
        - id: font-families
          title: Font Families
          template: '- **Primary:** {{primary_font}}

            - **Secondary:** {{secondary_font}}

            - **Monospace:** {{mono_font}}

            '
        - id: type-scale
          title: Type Scale
          type: table
          columns:
          - Element
          - Size
          - Weight
          - Line Height
          rows:
          - - H1
            - '{{h1_size}}'
            - '{{h1_weight}}'
            - '{{h1_line}}'
          - - H2
            - '{{h2_size}}'
            - '{{h2_weight}}'
            - '{{h2_line}}'
          - - H3
            - '{{h3_size}}'
            - '{{h3_weight}}'
            - '{{h3_line}}'
          - - Body
            - '{{body_size}}'
            - '{{body_weight}}'
            - '{{body_line}}'
          - - Small
            - '{{small_size}}'
            - '{{small_weight}}'
            - '{{small_line}}'
      - id: iconography
        title: Iconography
        template: '**Icon Library:** {{icon_library}}


          **Usage Guidelines:** {{icon_guidelines}}

          '
      - id: spacing-layout
        title: Spacing & Layout
        template: '**Grid System:** {{grid_system}}


          **Spacing Scale:** {{spacing_scale}}

          '
    - id: accessibility
      title: Accessibility Requirements
      instruction: Define specific accessibility requirements based on target compliance
        level and user needs. Be comprehensive but practical.
      elicit: true
      sections:
      - id: compliance-target
        title: Compliance Target
        template: '**Standard:** {{compliance_standard}}'
      - id: key-requirements
        title: Key Requirements
        template: '**Visual:**

          - Color contrast ratios: {{contrast_requirements}}

          - Focus indicators: {{focus_requirements}}

          - Text sizing: {{text_requirements}}


          **Interaction:**

          - Keyboard navigation: {{keyboard_requirements}}

          - Screen reader support: {{screen_reader_requirements}}

          - Touch targets: {{touch_requirements}}


          **Content:**

          - Alternative text: {{alt_text_requirements}}

          - Heading structure: {{heading_requirements}}

          - Form labels: {{form_requirements}}

          '
      - id: testing-strategy
        title: Testing Strategy
        template: '{{accessibility_testing}}'
    - id: responsiveness
      title: Responsiveness Strategy
      instruction: Define breakpoints and adaptation strategies for different device
        sizes. Consider both technical constraints and user contexts.
      elicit: true
      sections:
      - id: breakpoints
        title: Breakpoints
        type: table
        columns:
        - Breakpoint
        - Min Width
        - Max Width
        - Target Devices
        rows:
        - - Mobile
          - '{{mobile_min}}'
          - '{{mobile_max}}'
          - '{{mobile_devices}}'
        - - Tablet
          - '{{tablet_min}}'
          - '{{tablet_max}}'
          - '{{tablet_devices}}'
        - - Desktop
          - '{{desktop_min}}'
          - '{{desktop_max}}'
          - '{{desktop_devices}}'
        - - Wide
          - '{{wide_min}}'
          - '-'
          - '{{wide_devices}}'
      - id: adaptation-patterns
        title: Adaptation Patterns
        template: '**Layout Changes:** {{layout_adaptations}}


          **Navigation Changes:** {{nav_adaptations}}


          **Content Priority:** {{content_adaptations}}


          **Interaction Changes:** {{interaction_adaptations}}

          '
    - id: animation
      title: Animation & Micro-interactions
      instruction: Define motion design principles and key interactions. Keep performance
        and accessibility in mind.
      elicit: true
      sections:
      - id: motion-principles
        title: Motion Principles
        template: '{{motion_principles}}'
      - id: key-animations
        title: Key Animations
        repeatable: true
        template: '- **{{animation_name}}:** {{animation_description}} (Duration:
          {{duration}}, Easing: {{easing}})'
    - id: performance
      title: Performance Considerations
      instruction: Define performance goals and strategies that impact UX design decisions.
      sections:
      - id: performance-goals
        title: Performance Goals
        template: '- **Page Load:** {{load_time_goal}}

          - **Interaction Response:** {{interaction_goal}}

          - **Animation FPS:** {{animation_goal}}

          '
      - id: design-strategies
        title: Design Strategies
        template: '{{performance_strategies}}'
    - id: next-steps
      title: Next Steps
      instruction: 'After completing the UI/UX specification:


        1. Recommend review with stakeholders

        2. Suggest creating/updating visual designs in design tool

        3. Prepare for handoff to Design Architect for frontend architecture

        4. Note any open questions or decisions needed

        '
      sections:
      - id: immediate-actions
        title: Immediate Actions
        type: numbered-list
        template: '{{action}}'
      - id: design-handoff-checklist
        title: Design Handoff Checklist
        type: checklist
        items:
        - All user flows documented
        - Component inventory complete
        - Accessibility requirements defined
        - Responsive strategy clear
        - Brand guidelines incorporated
        - Performance goals established
    - id: checklist-results
      title: Checklist Results
      instruction: If a UI/UX checklist exists, run it against this document and report
        results here.
  fullstack-architecture-template:
    template:
      id: fullstack-architecture-template-v2
      name: Fullstack Architecture Document
      version: 2.0
      output:
        format: markdown
        filename: docs/architecture.md
        title: '{{project_name}} Fullstack Architecture Document'
    workflow:
      mode: interactive
      elicitation: advanced-elicitation
    sections:
    - id: introduction
      title: Introduction
      instruction: 'If available, review any provided relevant documents to gather
        all relevant context before beginning. At minimum, you should have access
        to docs/prd.md and docs/front-end-spec.md. Ask the user for any documents
        you need but cannot locate. This template creates a unified architecture that
        covers both backend and frontend concerns to guide AI-driven fullstack development.

        '
      elicit: true
      content: 'This document outlines the complete fullstack architecture for {{project_name}},
        including backend systems, frontend implementation, and their integration.
        It serves as the single source of truth for AI-driven development, ensuring
        consistency across the entire technology stack.


        This unified approach combines what would traditionally be separate backend
        and frontend architecture documents, streamlining the development process
        for modern fullstack applications where these concerns are increasingly intertwined.

        '
      sections:
      - id: starter-template
        title: Starter Template or Existing Project
        instruction: 'Before proceeding with architecture design, check if the project
          is based on any starter templates or existing codebases:


          1. Review the PRD and other documents for mentions of:

          - Fullstack starter templates (e.g., T3 Stack, MEAN/MERN starters, Django
          + React templates)

          - Monorepo templates (e.g., Nx, Turborepo starters)

          - Platform-specific starters (e.g., Vercel templates, AWS Amplify starters)

          - Existing projects being extended or cloned


          2. If starter templates or existing projects are mentioned:

          - Ask the user to provide access (links, repos, or files)

          - Analyze to understand pre-configured choices and constraints

          - Note any architectural decisions already made

          - Identify what can be modified vs what must be retained


          3. If no starter is mentioned but this is greenfield:

          - Suggest appropriate fullstack starters based on tech preferences

          - Consider platform-specific options (Vercel, AWS, etc.)

          - Let user decide whether to use one


          4. Document the decision and any constraints it imposes


          If none, state "N/A - Greenfield project"

          '
      - id: changelog
        title: Change Log
        type: table
        columns:
        - Date
        - Version
        - Description
        - Author
        instruction: Track document versions and changes
    - id: high-level-architecture
      title: High Level Architecture
      instruction: This section contains multiple subsections that establish the foundation.
        Present all subsections together, then elicit feedback on the complete section.
      elicit: true
      sections:
      - id: technical-summary
        title: Technical Summary
        instruction: 'Provide a comprehensive overview (4-6 sentences) covering:

          - Overall architectural style and deployment approach

          - Frontend framework and backend technology choices

          - Key integration points between frontend and backend

          - Infrastructure platform and services

          - How this architecture achieves PRD goals

          '
      - id: platform-infrastructure
        title: Platform and Infrastructure Choice
        instruction: 'Based on PRD requirements and technical assumptions, make a
          platform recommendation:


          1. Consider common patterns (not an exhaustive list, use your own best judgement
          and search the web as needed for emerging trends):

          - **Vercel + Supabase**: For rapid development with Next.js, built-in auth/storage

          - **AWS Full Stack**: For enterprise scale with Lambda, API Gateway, S3,
          Cognito

          - **Azure**: For .NET ecosystems or enterprise Microsoft environments

          - **Google Cloud**: For ML/AI heavy applications or Google ecosystem integration


          2. Present 2-3 viable options with clear pros/cons

          3. Make a recommendation with rationale

          4. Get explicit user confirmation


          Document the choice and key services that will be used.

          '
        template: '**Platform:** {{selected_platform}}

          **Key Services:** {{core_services_list}}

          **Deployment Host and Regions:** {{regions}}

          '
      - id: repository-structure
        title: Repository Structure
        instruction: 'Define the repository approach based on PRD requirements and
          platform choice, explain your rationale or ask questions to the user if
          unsure:


          1. For modern fullstack apps, monorepo is often preferred

          2. Consider tooling (Nx, Turborepo, Lerna, npm workspaces)

          3. Define package/app boundaries

          4. Plan for shared code between frontend and backend

          '
        template: '**Structure:** {{repo_structure_choice}}

          **Monorepo Tool:** {{monorepo_tool_if_applicable}}

          **Package Organization:** {{package_strategy}}

          '
      - id: architecture-diagram
        title: High Level Architecture Diagram
        type: mermaid
        mermaid_type: graph
        instruction: 'Create a Mermaid diagram showing the complete system architecture
          including:

          - User entry points (web, mobile)

          - Frontend application deployment

          - API layer (REST/GraphQL)

          - Backend services

          - Databases and storage

          - External integrations

          - CDN and caching layers


          Use appropriate diagram type for clarity.

          '
      - id: architectural-patterns
        title: Architectural Patterns
        instruction: 'List patterns that will guide both frontend and backend development.
          Include patterns for:

          - Overall architecture (e.g., Jamstack, Serverless, Microservices)

          - Frontend patterns (e.g., Component-based, State management)

          - Backend patterns (e.g., Repository, CQRS, Event-driven)

          - Integration patterns (e.g., BFF, API Gateway)


          For each pattern, provide recommendation and rationale.

          '
        repeatable: true
        template: '- **{{pattern_name}}:** {{pattern_description}} - _Rationale:_
          {{rationale}}'
        examples:
        - '**Jamstack Architecture:** Static site generation with serverless APIs
          - _Rationale:_ Optimal performance and scalability for content-heavy applications'
        - '**Component-Based UI:** Reusable React components with TypeScript - _Rationale:_
          Maintainability and type safety across large codebases'
        - '**Repository Pattern:** Abstract data access logic - _Rationale:_ Enables
          testing and future database migration flexibility'
        - '**API Gateway Pattern:** Single entry point for all API calls - _Rationale:_
          Centralized auth, rate limiting, and monitoring'
    - id: tech-stack
      title: Tech Stack
      instruction: 'This is the DEFINITIVE technology selection for the entire project.
        Work with user to finalize all choices. This table is the single source of
        truth - all development must use these exact versions.


        Key areas to cover:

        - Frontend and backend languages/frameworks

        - Databases and caching

        - Authentication and authorization

        - API approach

        - Testing tools for both frontend and backend

        - Build and deployment tools

        - Monitoring and logging


        Upon render, elicit feedback immediately.

        '
      elicit: true
      sections:
      - id: tech-stack-table
        title: Technology Stack Table
        type: table
        columns:
        - Category
        - Technology
        - Version
        - Purpose
        - Rationale
        rows:
        - - Frontend Language
          - '{{fe_language}}'
          - '{{version}}'
          - '{{purpose}}'
          - '{{why_chosen}}'
        - - Frontend Framework
          - '{{fe_framework}}'
          - '{{version}}'
          - '{{purpose}}'
          - '{{why_chosen}}'
        - - UI Component Library
          - '{{ui_library}}'
          - '{{version}}'
          - '{{purpose}}'
          - '{{why_chosen}}'
        - - State Management
          - '{{state_mgmt}}'
          - '{{version}}'
          - '{{purpose}}'
          - '{{why_chosen}}'
        - - Backend Language
          - '{{be_language}}'
          - '{{version}}'
          - '{{purpose}}'
          - '{{why_chosen}}'
        - - Backend Framework
          - '{{be_framework}}'
          - '{{version}}'
          - '{{purpose}}'
          - '{{why_chosen}}'
        - - API Style
          - '{{api_style}}'
          - '{{version}}'
          - '{{purpose}}'
          - '{{why_chosen}}'
        - - Database
          - '{{database}}'
          - '{{version}}'
          - '{{purpose}}'
          - '{{why_chosen}}'
        - - Cache
          - '{{cache}}'
          - '{{version}}'
          - '{{purpose}}'
          - '{{why_chosen}}'
        - - File Storage
          - '{{storage}}'
          - '{{version}}'
          - '{{purpose}}'
          - '{{why_chosen}}'
        - - Authentication
          - '{{auth}}'
          - '{{version}}'
          - '{{purpose}}'
          - '{{why_chosen}}'
        - - Frontend Testing
          - '{{fe_test}}'
          - '{{version}}'
          - '{{purpose}}'
          - '{{why_chosen}}'
        - - Backend Testing
          - '{{be_test}}'
          - '{{version}}'
          - '{{purpose}}'
          - '{{why_chosen}}'
        - - E2E Testing
          - '{{e2e_test}}'
          - '{{version}}'
          - '{{purpose}}'
          - '{{why_chosen}}'
        - - Build Tool
          - '{{build_tool}}'
          - '{{version}}'
          - '{{purpose}}'
          - '{{why_chosen}}'
        - - Bundler
          - '{{bundler}}'
          - '{{version}}'
          - '{{purpose}}'
          - '{{why_chosen}}'
        - - IaC Tool
          - '{{iac_tool}}'
          - '{{version}}'
          - '{{purpose}}'
          - '{{why_chosen}}'
        - - CI/CD
          - '{{cicd}}'
          - '{{version}}'
          - '{{purpose}}'
          - '{{why_chosen}}'
        - - Monitoring
          - '{{monitoring}}'
          - '{{version}}'
          - '{{purpose}}'
          - '{{why_chosen}}'
        - - Logging
          - '{{logging}}'
          - '{{version}}'
          - '{{purpose}}'
          - '{{why_chosen}}'
        - - CSS Framework
          - '{{css_framework}}'
          - '{{version}}'
          - '{{purpose}}'
          - '{{why_chosen}}'
    - id: data-models
      title: Data Models
      instruction: 'Define the core data models/entities that will be shared between
        frontend and backend:


        1. Review PRD requirements and identify key business entities

        2. For each model, explain its purpose and relationships

        3. Include key attributes and data types

        4. Show relationships between models

        5. Create TypeScript interfaces that can be shared

        6. Discuss design decisions with user


        Create a clear conceptual model before moving to database schema.

        '
      elicit: true
      repeatable: true
      sections:
      - id: model
        title: '{{model_name}}'
        template: '**Purpose:** {{model_purpose}}


          **Key Attributes:**

          - {{attribute_1}}: {{type_1}} - {{description_1}}

          - {{attribute_2}}: {{type_2}} - {{description_2}}

          '
        sections:
        - id: typescript-interface
          title: TypeScript Interface
          type: code
          language: typescript
          template: '{{model_interface}}'
        - id: relationships
          title: Relationships
          type: bullet-list
          template: '- {{relationship}}'
    - id: api-spec
      title: API Specification
      instruction: 'Based on the chosen API style from Tech Stack:


        1. If REST API, create an OpenAPI 3.0 specification

        2. If GraphQL, provide the GraphQL schema

        3. If tRPC, show router definitions

        4. Include all endpoints from epics/stories

        5. Define request/response schemas based on data models

        6. Document authentication requirements

        7. Include example requests/responses


        Use appropriate format for the chosen API style. If no API (e.g., static site),
        skip this section.

        '
      elicit: true
      sections:
      - id: rest-api
        title: REST API Specification
        condition: API style is REST
        type: code
        language: yaml
        template: "openapi: 3.0.0\ninfo:\n  title: {{api_title}}\n  version: {{api_version}}\n\
          \  description: {{api_description}}\nservers:\n  - url: {{server_url}}\n\
          \    description: {{server_description}}\n"
      - id: graphql-api
        title: GraphQL Schema
        condition: API style is GraphQL
        type: code
        language: graphql
        template: '{{graphql_schema}}'
      - id: trpc-api
        title: tRPC Router Definitions
        condition: API style is tRPC
        type: code
        language: typescript
        template: '{{trpc_routers}}'
    - id: components
      title: Components
      instruction: 'Based on the architectural patterns, tech stack, and data models
        from above:


        1. Identify major logical components/services across the fullstack

        2. Consider both frontend and backend components

        3. Define clear boundaries and interfaces between components

        4. For each component, specify:

        - Primary responsibility

        - Key interfaces/APIs exposed

        - Dependencies on other components

        - Technology specifics based on tech stack choices


        5. Create component diagrams where helpful

        '
      elicit: true
      sections:
      - id: component-list
        repeatable: true
        title: '{{component_name}}'
        template: '**Responsibility:** {{component_description}}


          **Key Interfaces:**

          - {{interface_1}}

          - {{interface_2}}


          **Dependencies:** {{dependencies}}


          **Technology Stack:** {{component_tech_details}}

          '
      - id: component-diagrams
        title: Component Diagrams
        type: mermaid
        instruction: 'Create Mermaid diagrams to visualize component relationships.
          Options:

          - C4 Container diagram for high-level view

          - Component diagram for detailed internal structure

          - Sequence diagrams for complex interactions

          Choose the most appropriate for clarity

          '
    - id: external-apis
      title: External APIs
      condition: Project requires external API integrations
      instruction: 'For each external service integration:


        1. Identify APIs needed based on PRD requirements and component design

        2. If documentation URLs are unknown, ask user for specifics

        3. Document authentication methods and security considerations

        4. List specific endpoints that will be used

        5. Note any rate limits or usage constraints


        If no external APIs are needed, state this explicitly and skip to next section.

        '
      elicit: true
      repeatable: true
      sections:
      - id: api
        title: '{{api_name}} API'
        template: '- **Purpose:** {{api_purpose}}

          - **Documentation:** {{api_docs_url}}

          - **Base URL(s):** {{api_base_url}}

          - **Authentication:** {{auth_method}}

          - **Rate Limits:** {{rate_limits}}


          **Key Endpoints Used:**

          - `{{method}} {{endpoint_path}}` - {{endpoint_purpose}}


          **Integration Notes:** {{integration_considerations}}

          '
    - id: core-workflows
      title: Core Workflows
      type: mermaid
      mermaid_type: sequence
      instruction: 'Illustrate key system workflows using sequence diagrams:


        1. Identify critical user journeys from PRD

        2. Show component interactions including external APIs

        3. Include both frontend and backend flows

        4. Include error handling paths

        5. Document async operations

        6. Create both high-level and detailed diagrams as needed


        Focus on workflows that clarify architecture decisions or complex interactions.

        '
      elicit: true
    - id: database-schema
      title: Database Schema
      instruction: 'Transform the conceptual data models into concrete database schemas:


        1. Use the database type(s) selected in Tech Stack

        2. Create schema definitions using appropriate notation

        3. Include indexes, constraints, and relationships

        4. Consider performance and scalability

        5. For NoSQL, show document structures


        Present schema in format appropriate to database type (SQL DDL, JSON schema,
        etc.)

        '
      elicit: true
    - id: frontend-architecture
      title: Frontend Architecture
      instruction: Define frontend-specific architecture details. After each subsection,
        note if user wants to refine before continuing.
      elicit: true
      sections:
      - id: component-architecture
        title: Component Architecture
        instruction: Define component organization and patterns based on chosen framework.
        sections:
        - id: component-organization
          title: Component Organization
          type: code
          language: text
          template: '{{component_structure}}'
        - id: component-template
          title: Component Template
          type: code
          language: typescript
          template: '{{component_template}}'
      - id: state-management
        title: State Management Architecture
        instruction: Detail state management approach based on chosen solution.
        sections:
        - id: state-structure
          title: State Structure
          type: code
          language: typescript
          template: '{{state_structure}}'
        - id: state-patterns
          title: State Management Patterns
          type: bullet-list
          template: '- {{pattern}}'
      - id: routing-architecture
        title: Routing Architecture
        instruction: Define routing structure based on framework choice.
        sections:
        - id: route-organization
          title: Route Organization
          type: code
          language: text
          template: '{{route_structure}}'
        - id: protected-routes
          title: Protected Route Pattern
          type: code
          language: typescript
          template: '{{protected_route_example}}'
      - id: frontend-services
        title: Frontend Services Layer
        instruction: Define how frontend communicates with backend.
        sections:
        - id: api-client-setup
          title: API Client Setup
          type: code
          language: typescript
          template: '{{api_client_setup}}'
        - id: service-example
          title: Service Example
          type: code
          language: typescript
          template: '{{service_example}}'
    - id: backend-architecture
      title: Backend Architecture
      instruction: Define backend-specific architecture details. Consider serverless
        vs traditional server approaches.
      elicit: true
      sections:
      - id: service-architecture
        title: Service Architecture
        instruction: Based on platform choice, define service organization.
        sections:
        - id: serverless-architecture
          condition: Serverless architecture chosen
          sections:
          - id: function-organization
            title: Function Organization
            type: code
            language: text
            template: '{{function_structure}}'
          - id: function-template
            title: Function Template
            type: code
            language: typescript
            template: '{{function_template}}'
        - id: traditional-server
          condition: Traditional server architecture chosen
          sections:
          - id: controller-organization
            title: Controller/Route Organization
            type: code
            language: text
            template: '{{controller_structure}}'
          - id: controller-template
            title: Controller Template
            type: code
            language: typescript
            template: '{{controller_template}}'
      - id: database-architecture
        title: Database Architecture
        instruction: Define database schema and access patterns.
        sections:
        - id: schema-design
          title: Schema Design
          type: code
          language: sql
          template: '{{database_schema}}'
        - id: data-access-layer
          title: Data Access Layer
          type: code
          language: typescript
          template: '{{repository_pattern}}'
      - id: auth-architecture
        title: Authentication and Authorization
        instruction: Define auth implementation details.
        sections:
        - id: auth-flow
          title: Auth Flow
          type: mermaid
          mermaid_type: sequence
          template: '{{auth_flow_diagram}}'
        - id: auth-middleware
          title: Middleware/Guards
          type: code
          language: typescript
          template: '{{auth_middleware}}'
    - id: unified-project-structure
      title: Unified Project Structure
      instruction: Create a monorepo structure that accommodates both frontend and
        backend. Adapt based on chosen tools and frameworks.
      elicit: true
      type: code
      language: plaintext
      examples:
      - "{{project-name}}/\n\u251C\u2500\u2500 .github/                    # CI/CD\
        \ workflows\n\u2502   \u2514\u2500\u2500 workflows/\n\u2502       \u251C\u2500\
        \u2500 ci.yaml\n\u2502       \u2514\u2500\u2500 deploy.yaml\n\u251C\u2500\u2500\
        \ apps/                       # Application packages\n\u2502   \u251C\u2500\
        \u2500 web/                    # Frontend application\n\u2502   \u2502   \u251C\
        \u2500\u2500 src/\n\u2502   \u2502   \u2502   \u251C\u2500\u2500 components/\
        \     # UI components\n\u2502   \u2502   \u2502   \u251C\u2500\u2500 pages/\
        \          # Page components/routes\n\u2502   \u2502   \u2502   \u251C\u2500\
        \u2500 hooks/          # Custom React hooks\n\u2502   \u2502   \u2502   \u251C\
        \u2500\u2500 services/       # API client services\n\u2502   \u2502   \u2502\
        \   \u251C\u2500\u2500 stores/         # State management\n\u2502   \u2502\
        \   \u2502   \u251C\u2500\u2500 styles/         # Global styles/themes\n\u2502\
        \   \u2502   \u2502   \u2514\u2500\u2500 utils/          # Frontend utilities\n\
        \u2502   \u2502   \u251C\u2500\u2500 public/             # Static assets\n\
        \u2502   \u2502   \u251C\u2500\u2500 tests/              # Frontend tests\n\
        \u2502   \u2502   \u2514\u2500\u2500 package.json\n\u2502   \u2514\u2500\u2500\
        \ api/                    # Backend application\n\u2502       \u251C\u2500\
        \u2500 src/\n\u2502       \u2502   \u251C\u2500\u2500 routes/         # API\
        \ routes/controllers\n\u2502       \u2502   \u251C\u2500\u2500 services/ \
        \      # Business logic\n\u2502       \u2502   \u251C\u2500\u2500 models/\
        \         # Data models\n\u2502       \u2502   \u251C\u2500\u2500 middleware/\
        \     # Express/API middleware\n\u2502       \u2502   \u251C\u2500\u2500 utils/\
        \          # Backend utilities\n\u2502       \u2502   \u2514\u2500\u2500 {{serverless_or_server_entry}}\n\
        \u2502       \u251C\u2500\u2500 tests/              # Backend tests\n\u2502\
        \       \u2514\u2500\u2500 package.json\n\u251C\u2500\u2500 packages/    \
        \               # Shared packages\n\u2502   \u251C\u2500\u2500 shared/   \
        \              # Shared types/utilities\n\u2502   \u2502   \u251C\u2500\u2500\
        \ src/\n\u2502   \u2502   \u2502   \u251C\u2500\u2500 types/          # TypeScript\
        \ interfaces\n\u2502   \u2502   \u2502   \u251C\u2500\u2500 constants/   \
        \   # Shared constants\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 utils/\
        \          # Shared utilities\n\u2502   \u2502   \u2514\u2500\u2500 package.json\n\
        \u2502   \u251C\u2500\u2500 ui/                     # Shared UI components\n\
        \u2502   \u2502   \u251C\u2500\u2500 src/\n\u2502   \u2502   \u2514\u2500\u2500\
        \ package.json\n\u2502   \u2514\u2500\u2500 config/                 # Shared\
        \ configuration\n\u2502       \u251C\u2500\u2500 eslint/\n\u2502       \u251C\
        \u2500\u2500 typescript/\n\u2502       \u2514\u2500\u2500 jest/\n\u251C\u2500\
        \u2500 infrastructure/             # IaC definitions\n\u2502   \u2514\u2500\
        \u2500 {{iac_structure}}\n\u251C\u2500\u2500 scripts/                    #\
        \ Build/deploy scripts\n\u251C\u2500\u2500 docs/                       # Documentation\n\
        \u2502   \u251C\u2500\u2500 prd.md\n\u2502   \u251C\u2500\u2500 front-end-spec.md\n\
        \u2502   \u2514\u2500\u2500 fullstack-architecture.md\n\u251C\u2500\u2500\
        \ .env.example                # Environment template\n\u251C\u2500\u2500 package.json\
        \                # Root package.json\n\u251C\u2500\u2500 {{monorepo_config}}\
        \         # Monorepo configuration\n\u2514\u2500\u2500 README.md\n"
    - id: development-workflow
      title: Development Workflow
      instruction: Define the development setup and workflow for the fullstack application.
      elicit: true
      sections:
      - id: local-setup
        title: Local Development Setup
        sections:
        - id: prerequisites
          title: Prerequisites
          type: code
          language: bash
          template: '{{prerequisites_commands}}'
        - id: initial-setup
          title: Initial Setup
          type: code
          language: bash
          template: '{{setup_commands}}'
        - id: dev-commands
          title: Development Commands
          type: code
          language: bash
          template: '# Start all services

            {{start_all_command}}


            # Start frontend only

            {{start_frontend_command}}


            # Start backend only

            {{start_backend_command}}


            # Run tests

            {{test_commands}}

            '
      - id: environment-config
        title: Environment Configuration
        sections:
        - id: env-vars
          title: Required Environment Variables
          type: code
          language: bash
          template: '# Frontend (.env.local)

            {{frontend_env_vars}}


            # Backend (.env)

            {{backend_env_vars}}


            # Shared

            {{shared_env_vars}}

            '
    - id: deployment-architecture
      title: Deployment Architecture
      instruction: Define deployment strategy based on platform choice.
      elicit: true
      sections:
      - id: deployment-strategy
        title: Deployment Strategy
        template: '**Frontend Deployment:**

          - **Platform:** {{frontend_deploy_platform}}

          - **Build Command:** {{frontend_build_command}}

          - **Output Directory:** {{frontend_output_dir}}

          - **CDN/Edge:** {{cdn_strategy}}


          **Backend Deployment:**

          - **Platform:** {{backend_deploy_platform}}

          - **Build Command:** {{backend_build_command}}

          - **Deployment Method:** {{deployment_method}}

          '
      - id: cicd-pipeline
        title: CI/CD Pipeline
        type: code
        language: yaml
        template: '{{cicd_pipeline_config}}'
      - id: environments
        title: Environments
        type: table
        columns:
        - Environment
        - Frontend URL
        - Backend URL
        - Purpose
        rows:
        - - Development
          - '{{dev_fe_url}}'
          - '{{dev_be_url}}'
          - Local development
        - - Staging
          - '{{staging_fe_url}}'
          - '{{staging_be_url}}'
          - Pre-production testing
        - - Production
          - '{{prod_fe_url}}'
          - '{{prod_be_url}}'
          - Live environment
    - id: security-performance
      title: Security and Performance
      instruction: Define security and performance considerations for the fullstack
        application.
      elicit: true
      sections:
      - id: security-requirements
        title: Security Requirements
        template: '**Frontend Security:**

          - CSP Headers: {{csp_policy}}

          - XSS Prevention: {{xss_strategy}}

          - Secure Storage: {{storage_strategy}}


          **Backend Security:**

          - Input Validation: {{validation_approach}}

          - Rate Limiting: {{rate_limit_config}}

          - CORS Policy: {{cors_config}}


          **Authentication Security:**

          - Token Storage: {{token_strategy}}

          - Session Management: {{session_approach}}

          - Password Policy: {{password_requirements}}

          '
      - id: performance-optimization
        title: Performance Optimization
        template: '**Frontend Performance:**

          - Bundle Size Target: {{bundle_size}}

          - Loading Strategy: {{loading_approach}}

          - Caching Strategy: {{fe_cache_strategy}}


          **Backend Performance:**

          - Response Time Target: {{response_target}}

          - Database Optimization: {{db_optimization}}

          - Caching Strategy: {{be_cache_strategy}}

          '
    - id: testing-strategy
      title: Testing Strategy
      instruction: Define comprehensive testing approach for fullstack application.
      elicit: true
      sections:
      - id: testing-pyramid
        title: Testing Pyramid
        type: code
        language: text
        template: 'E2E Tests

          /        \

          Integration Tests

          /            \

          Frontend Unit  Backend Unit

          '
      - id: test-organization
        title: Test Organization
        sections:
        - id: frontend-tests
          title: Frontend Tests
          type: code
          language: text
          template: '{{frontend_test_structure}}'
        - id: backend-tests
          title: Backend Tests
          type: code
          language: text
          template: '{{backend_test_structure}}'
        - id: e2e-tests
          title: E2E Tests
          type: code
          language: text
          template: '{{e2e_test_structure}}'
      - id: test-examples
        title: Test Examples
        sections:
        - id: frontend-test
          title: Frontend Component Test
          type: code
          language: typescript
          template: '{{frontend_test_example}}'
        - id: backend-test
          title: Backend API Test
          type: code
          language: typescript
          template: '{{backend_test_example}}'
        - id: e2e-test
          title: E2E Test
          type: code
          language: typescript
          template: '{{e2e_test_example}}'
    - id: coding-standards
      title: Coding Standards
      instruction: Define MINIMAL but CRITICAL standards for AI agents. Focus only
        on project-specific rules that prevent common mistakes. These will be used
        by dev agents.
      elicit: true
      sections:
      - id: critical-rules
        title: Critical Fullstack Rules
        repeatable: true
        template: '- **{{rule_name}}:** {{rule_description}}'
        examples:
        - '**Type Sharing:** Always define types in packages/shared and import from
          there'
        - '**API Calls:** Never make direct HTTP calls - use the service layer'
        - '**Environment Variables:** Access only through config objects, never process.env
          directly'
        - '**Error Handling:** All API routes must use the standard error handler'
        - '**State Updates:** Never mutate state directly - use proper state management
          patterns'
      - id: naming-conventions
        title: Naming Conventions
        type: table
        columns:
        - Element
        - Frontend
        - Backend
        - Example
        rows:
        - - Components
          - PascalCase
          - '-'
          - '`UserProfile.tsx`'
        - - Hooks
          - camelCase with 'use'
          - '-'
          - '`useAuth.ts`'
        - - API Routes
          - '-'
          - kebab-case
          - '`/api/user-profile`'
        - - Database Tables
          - '-'
          - snake_case
          - '`user_profiles`'
    - id: error-handling
      title: Error Handling Strategy
      instruction: Define unified error handling across frontend and backend.
      elicit: true
      sections:
      - id: error-flow
        title: Error Flow
        type: mermaid
        mermaid_type: sequence
        template: '{{error_flow_diagram}}'
      - id: error-format
        title: Error Response Format
        type: code
        language: typescript
        template: "interface ApiError {\n  error: {\n    code: string;\n    message:\
          \ string;\n    details?: Record<string, any>;\n    timestamp: string;\n\
          \    requestId: string;\n  };\n}\n"
      - id: frontend-error-handling
        title: Frontend Error Handling
        type: code
        language: typescript
        template: '{{frontend_error_handler}}'
      - id: backend-error-handling
        title: Backend Error Handling
        type: code
        language: typescript
        template: '{{backend_error_handler}}'
    - id: monitoring
      title: Monitoring and Observability
      instruction: Define monitoring strategy for fullstack application.
      elicit: true
      sections:
      - id: monitoring-stack
        title: Monitoring Stack
        template: '- **Frontend Monitoring:** {{frontend_monitoring}}

          - **Backend Monitoring:** {{backend_monitoring}}

          - **Error Tracking:** {{error_tracking}}

          - **Performance Monitoring:** {{perf_monitoring}}

          '
      - id: key-metrics
        title: Key Metrics
        template: '**Frontend Metrics:**

          - Core Web Vitals

          - JavaScript errors

          - API response times

          - User interactions


          **Backend Metrics:**

          - Request rate

          - Error rate

          - Response time

          - Database query performance

          '
    - id: checklist-results
      title: Checklist Results Report
      instruction: Before running the checklist, offer to output the full architecture
        document. Once user confirms, execute the architect-checklist and populate
        results here.
  market-research-tmpl:
    template:
      id: market-research-template-v2
      name: Market Research Report
      version: 2.0
      output:
        format: markdown
        filename: docs/market-research.md
        title: 'Market Research Report: {{project_product_name}}'
    workflow:
      mode: interactive
      elicitation: advanced-elicitation
      custom_elicitation:
        title: Market Research Elicitation Actions
        options:
        - Expand market sizing calculations with sensitivity analysis
        - Deep dive into a specific customer segment
        - Analyze an emerging market trend in detail
        - Compare this market to an analogous market
        - Stress test market assumptions
        - Explore adjacent market opportunities
        - Challenge market definition and boundaries
        - Generate strategic scenarios (best/base/worst case)
        - If only we had considered [X market factor]...
        - Proceed to next section
    sections:
    - id: executive-summary
      title: Executive Summary
      instruction: Provide a high-level overview of key findings, market opportunity
        assessment, and strategic recommendations. Write this section LAST after completing
        all other sections.
    - id: research-objectives
      title: Research Objectives & Methodology
      instruction: This template guides the creation of a comprehensive market research
        report. Begin by understanding what market insights the user needs and why.
        Work through each section systematically, using the appropriate analytical
        frameworks based on the research objectives.
      sections:
      - id: objectives
        title: Research Objectives
        instruction: 'List the primary objectives of this market research:

          - What decisions will this research inform?

          - What specific questions need to be answered?

          - What are the success criteria for this research?

          '
      - id: methodology
        title: Research Methodology
        instruction: 'Describe the research approach:

          - Data sources used (primary/secondary)

          - Analysis frameworks applied

          - Data collection timeframe

          - Limitations and assumptions

          '
    - id: market-overview
      title: Market Overview
      sections:
      - id: market-definition
        title: Market Definition
        instruction: 'Define the market being analyzed:

          - Product/service category

          - Geographic scope

          - Customer segments included

          - Value chain position

          '
      - id: market-size-growth
        title: Market Size & Growth
        instruction: 'Guide through TAM, SAM, SOM calculations with clear assumptions.
          Use one or more approaches:

          - Top-down: Start with industry data, narrow down

          - Bottom-up: Build from customer/unit economics

          - Value theory: Based on value provided vs. alternatives

          '
        sections:
        - id: tam
          title: Total Addressable Market (TAM)
          instruction: Calculate and explain the total market opportunity
        - id: sam
          title: Serviceable Addressable Market (SAM)
          instruction: Define the portion of TAM you can realistically reach
        - id: som
          title: Serviceable Obtainable Market (SOM)
          instruction: Estimate the portion you can realistically capture
      - id: market-trends
        title: Market Trends & Drivers
        instruction: Analyze key trends shaping the market using appropriate frameworks
          like PESTEL
        sections:
        - id: key-trends
          title: Key Market Trends
          instruction: 'List and explain 3-5 major trends:

            - Trend 1: Description and impact

            - Trend 2: Description and impact

            - etc.

            '
        - id: growth-drivers
          title: Growth Drivers
          instruction: Identify primary factors driving market growth
        - id: market-inhibitors
          title: Market Inhibitors
          instruction: Identify factors constraining market growth
    - id: customer-analysis
      title: Customer Analysis
      sections:
      - id: segment-profiles
        title: Target Segment Profiles
        instruction: For each segment, create detailed profiles including demographics/firmographics,
          psychographics, behaviors, needs, and willingness to pay
        repeatable: true
        sections:
        - id: segment
          title: 'Segment {{segment_number}}: {{segment_name}}'
          template: '- **Description:** {{brief_overview}}

            - **Size:** {{number_of_customers_market_value}}

            - **Characteristics:** {{key_demographics_firmographics}}

            - **Needs & Pain Points:** {{primary_problems}}

            - **Buying Process:** {{purchasing_decisions}}

            - **Willingness to Pay:** {{price_sensitivity}}

            '
      - id: jobs-to-be-done
        title: Jobs-to-be-Done Analysis
        instruction: Uncover what customers are really trying to accomplish
        sections:
        - id: functional-jobs
          title: Functional Jobs
          instruction: List practical tasks and objectives customers need to complete
        - id: emotional-jobs
          title: Emotional Jobs
          instruction: Describe feelings and perceptions customers seek
        - id: social-jobs
          title: Social Jobs
          instruction: Explain how customers want to be perceived by others
      - id: customer-journey
        title: Customer Journey Mapping
        instruction: Map the end-to-end customer experience for primary segments
        template: 'For primary customer segment:


          1. **Awareness:** {{discovery_process}}

          2. **Consideration:** {{evaluation_criteria}}

          3. **Purchase:** {{decision_triggers}}

          4. **Onboarding:** {{initial_expectations}}

          5. **Usage:** {{interaction_patterns}}

          6. **Advocacy:** {{referral_behaviors}}

          '
    - id: competitive-landscape
      title: Competitive Landscape
      sections:
      - id: market-structure
        title: Market Structure
        instruction: 'Describe the overall competitive environment:

          - Number of competitors

          - Market concentration

          - Competitive intensity

          '
      - id: major-players
        title: Major Players Analysis
        instruction: 'For top 3-5 competitors:

          - Company name and brief description

          - Market share estimate

          - Key strengths and weaknesses

          - Target customer focus

          - Pricing strategy

          '
      - id: competitive-positioning
        title: Competitive Positioning
        instruction: 'Analyze how competitors are positioned:

          - Value propositions

          - Differentiation strategies

          - Market gaps and opportunities

          '
    - id: industry-analysis
      title: Industry Analysis
      sections:
      - id: porters-five-forces
        title: Porter's Five Forces Assessment
        instruction: Analyze each force with specific evidence and implications
        sections:
        - id: supplier-power
          title: 'Supplier Power: {{power_level}}'
          template: '{{analysis_and_implications}}'
        - id: buyer-power
          title: 'Buyer Power: {{power_level}}'
          template: '{{analysis_and_implications}}'
        - id: competitive-rivalry
          title: 'Competitive Rivalry: {{intensity_level}}'
          template: '{{analysis_and_implications}}'
        - id: threat-new-entry
          title: 'Threat of New Entry: {{threat_level}}'
          template: '{{analysis_and_implications}}'
        - id: threat-substitutes
          title: 'Threat of Substitutes: {{threat_level}}'
          template: '{{analysis_and_implications}}'
      - id: adoption-lifecycle
        title: Technology Adoption Lifecycle Stage
        instruction: 'Identify where the market is in the adoption curve:

          - Current stage and evidence

          - Implications for strategy

          - Expected progression timeline

          '
    - id: opportunity-assessment
      title: Opportunity Assessment
      sections:
      - id: market-opportunities
        title: Market Opportunities
        instruction: Identify specific opportunities based on the analysis
        repeatable: true
        sections:
        - id: opportunity
          title: 'Opportunity {{opportunity_number}}: {{name}}'
          template: '- **Description:** {{what_is_the_opportunity}}

            - **Size/Potential:** {{quantified_potential}}

            - **Requirements:** {{needed_to_capture}}

            - **Risks:** {{key_challenges}}

            '
      - id: strategic-recommendations
        title: Strategic Recommendations
        sections:
        - id: go-to-market
          title: Go-to-Market Strategy
          instruction: 'Recommend approach for market entry/expansion:

            - Target segment prioritization

            - Positioning strategy

            - Channel strategy

            - Partnership opportunities

            '
        - id: pricing-strategy
          title: Pricing Strategy
          instruction: 'Based on willingness to pay analysis and competitive landscape:

            - Recommended pricing model

            - Price points/ranges

            - Value metric

            - Competitive positioning

            '
        - id: risk-mitigation
          title: Risk Mitigation
          instruction: 'Key risks and mitigation strategies:

            - Market risks

            - Competitive risks

            - Execution risks

            - Regulatory/compliance risks

            '
    - id: appendices
      title: Appendices
      sections:
      - id: data-sources
        title: A. Data Sources
        instruction: List all sources used in the research
      - id: calculations
        title: B. Detailed Calculations
        instruction: Include any complex calculations or models
      - id: additional-analysis
        title: C. Additional Analysis
        instruction: Any supplementary analysis not included in main body
  prd-template:
    template:
      id: prd-template-v2
      name: Product Requirements Document
      version: 2.0
      output:
        format: markdown
        filename: docs/prd.md
        title: '{{project_name}} Product Requirements Document (PRD)'
    workflow:
      mode: interactive
      elicitation: advanced-elicitation
    sections:
    - id: goals-context
      title: Goals and Background Context
      instruction: 'Ask if Project Brief document is available. If NO Project Brief
        exists, STRONGLY recommend creating one first using project-brief-tmpl (it
        provides essential foundation: problem statement, target users, success metrics,
        MVP scope, constraints). If user insists on PRD without brief, gather this
        information during Goals section. If Project Brief exists, review and use
        it to populate Goals (bullet list of desired outcomes) and Background Context
        (1-2 paragraphs on what this solves and why) so we can determine what is and
        is not in scope for PRD mvp. Either way this is critical to determine the
        requirements. Include Change Log table.

        '
      sections:
      - id: goals
        title: Goals
        type: bullet-list
        instruction: Bullet list of 1 line desired outcomes the PRD will deliver if
          successful - user and project desires
      - id: background
        title: Background Context
        type: paragraphs
        instruction: 1-2 short paragraphs summarizing the background context, such
          as what we learned in the brief without being redundant with the goals,
          what and why this solves a problem, what the current landscape or need is
      - id: changelog
        title: Change Log
        type: table
        columns:
        - Date
        - Version
        - Description
        - Author
        instruction: Track document versions and changes
    - id: requirements
      title: Requirements
      instruction: Draft the list of functional and non functional requirements under
        the two child sections
      elicit: true
      sections:
      - id: functional
        title: Functional
        type: numbered-list
        prefix: FR
        instruction: Each Requirement will be a bullet markdown and an identifier
          sequence starting with FR
        examples:
        - 'FR6: The Todo List uses AI to detect and warn against potentially duplicate
          todo items that are worded differently.'
      - id: non-functional
        title: Non Functional
        type: numbered-list
        prefix: NFR
        instruction: Each Requirement will be a bullet markdown and an identifier
          sequence starting with NFR
        examples:
        - 'NFR1: AWS service usage must aim to stay within free-tier limits where
          feasible.'
    - id: ui-goals
      title: User Interface Design Goals
      condition: PRD has UX/UI requirements
      instruction: 'Capture high-level UI/UX vision to guide Design Architect and
        to inform story creation. Steps:


        1. Pre-fill all subsections with educated guesses based on project context

        2. Present the complete rendered section to user

        3. Clearly let the user know where assumptions were made

        4. Ask targeted questions for unclear/missing elements or areas needing more
        specification

        5. This is NOT detailed UI spec - focus on product vision and user goals

        '
      elicit: true
      choices:
        accessibility:
        - None
        - WCAG AA
        - WCAG AAA
        platforms:
        - Web Responsive
        - Mobile Only
        - Desktop Only
        - Cross-Platform
      sections:
      - id: ux-vision
        title: Overall UX Vision
      - id: interaction-paradigms
        title: Key Interaction Paradigms
      - id: core-screens
        title: Core Screens and Views
        instruction: From a product perspective, what are the most critical screens
          or views necessary to deliver the the PRD values and goals? This is meant
          to be Conceptual High Level to Drive Rough Epic or User Stories
        examples:
        - Login Screen
        - Main Dashboard
        - Item Detail Page
        - Settings Page
      - id: accessibility
        title: 'Accessibility: {None|WCAG AA|WCAG AAA|Custom Requirements}'
      - id: branding
        title: Branding
        instruction: Any known branding elements or style guides that must be incorporated?
        examples:
        - Replicate the look and feel of early 1900s black and white cinema, including
          animated effects replicating film damage or projector glitches during page
          or state transitions.
        - Attached is the full color pallet and tokens for our corporate branding.
      - id: target-platforms
        title: 'Target Device and Platforms: {Web Responsive|Mobile Only|Desktop Only|Cross-Platform}'
        examples:
        - Web Responsive, and all mobile platforms
        - iPhone Only
        - ASCII Windows Desktop
    - id: technical-assumptions
      title: Technical Assumptions
      instruction: 'Gather technical decisions that will guide the Architect. Steps:


        1. Check if ../resources/data.md#technical-preferences or an attached technical-preferences
        file exists - use it to pre-populate choices

        2. Ask user about: languages, frameworks, starter templates, libraries, APIs,
        deployment targets

        3. For unknowns, offer guidance based on project goals and MVP scope

        4. Document ALL technical choices with rationale (why this choice fits the
        project)

        5. These become constraints for the Architect - be specific and complete

        '
      elicit: true
      choices:
        repository:
        - Monorepo
        - Polyrepo
        architecture:
        - Monolith
        - Microservices
        - Serverless
        testing:
        - Unit Only
        - Unit + Integration
        - Full Testing Pyramid
      sections:
      - id: repository-structure
        title: 'Repository Structure: {Monorepo|Polyrepo|Multi-repo}'
      - id: service-architecture
        title: Service Architecture
        instruction: CRITICAL DECISION - Document the high-level service architecture
          (e.g., Monolith, Microservices, Serverless functions within a Monorepo).
      - id: testing-requirements
        title: Testing Requirements
        instruction: CRITICAL DECISION - Document the testing requirements, unit only,
          integration, e2e, manual, need for manual testing convenience methods).
      - id: additional-assumptions
        title: Additional Technical Assumptions and Requests
        instruction: Throughout the entire process of drafting this document, if any
          other technical assumptions are raised or discovered appropriate for the
          architect, add them here as additional bulleted items
    - id: epic-list
      title: Epic List
      instruction: 'Present a high-level list of all epics for user approval. Each
        epic should have a title and a short (1 sentence) goal statement. This allows
        the user to review the overall structure before diving into details.


        CRITICAL: Epics MUST be logically sequential following agile best practices:


        - Each epic should deliver a significant, end-to-end, fully deployable increment
        of testable functionality

        - Epic 1 must establish foundational project infrastructure (app setup, Git,
        CI/CD, core services) unless we are adding new functionality to an existing
        app, while also delivering an initial piece of functionality, even as simple
        as a health-check route or display of a simple canary page - remember this
        when we produce the stories for the first epic!

        - Each subsequent epic builds upon previous epics'' functionality delivering
        major blocks of functionality that provide tangible value to users or business
        when deployed

        - Not every project needs multiple epics, an epic needs to deliver value.
        For example, an API completed can deliver value even if a UI is not complete
        and planned for a separate epic.

        - Err on the side of less epics, but let the user know your rationale and
        offer options for splitting them if it seems some are too large or focused
        on disparate things.

        - Cross Cutting Concerns should flow through epics and stories and not be
        final stories. For example, adding a logging framework as a last story of
        an epic, or at the end of a project as a final epic or story would be terrible
        as we would not have logging from the beginning.

        '
      elicit: true
      examples:
      - 'Epic 1: Foundation & Core Infrastructure: Establish project setup, authentication,
        and basic user management'
      - 'Epic 2: Core Business Entities: Create and manage primary domain objects
        with CRUD operations'
      - 'Epic 3: User Workflows & Interactions: Enable key user journeys and business
        processes'
      - 'Epic 4: Reporting & Analytics: Provide insights and data visualization for
        users'
    - id: epic-details
      title: Epic {{epic_number}} {{epic_title}}
      repeatable: true
      instruction: 'After the epic list is approved, present each epic with all its
        stories and acceptance criteria as a complete review unit.


        For each epic provide expanded goal (2-3 sentences describing the objective
        and value all the stories will achieve).


        CRITICAL STORY SEQUENCING REQUIREMENTS:


        - Stories within each epic MUST be logically sequential

        - Each story should be a "vertical slice" delivering complete functionality
        aside from early enabler stories for project foundation

        - No story should depend on work from a later story or epic

        - Identify and note any direct prerequisite stories

        - Focus on "what" and "why" not "how" (leave technical implementation to Architect)
        yet be precise enough to support a logical sequential order of operations
        from story to story.

        - Ensure each story delivers clear user or business value, try to avoid enablers
        and build them into stories that deliver value.

        - Size stories for AI agent execution: Each story must be completable by a
        single AI agent in one focused session without context overflow

        - Think "junior developer working for 2-4 hours" - stories must be small,
        focused, and self-contained

        - If a story seems complex, break it down further as long as it can deliver
        a vertical slice

        '
      elicit: true
      template: '{{epic_goal}}'
      sections:
      - id: story
        title: Story {{epic_number}}.{{story_number}} {{story_title}}
        repeatable: true
        template: 'As a {{user_type}},

          I want {{action}},

          so that {{benefit}}.

          '
        sections:
        - id: acceptance-criteria
          title: Acceptance Criteria
          type: numbered-list
          item_template: '{{criterion_number}}: {{criteria}}'
          repeatable: true
          instruction: 'Define clear, comprehensive, and testable acceptance criteria
            that:


            - Precisely define what "done" means from a functional perspective

            - Are unambiguous and serve as basis for verification

            - Include any critical non-functional requirements from the PRD

            - Consider local testability for backend/data components

            - Specify UI/UX requirements and framework adherence where applicable

            - Avoid cross-cutting concerns that should be in other stories or PRD
            sections

            '
    - id: checklist-results
      title: Checklist Results Report
      instruction: Before running the checklist and drafting the prompts, offer to
        output the full updated PRD. If outputting it, confirm with the user that
        you will be proceeding to run the checklist and produce the report. Once the
        user confirms, execute the pm-checklist and populate the results in this section.
    - id: next-steps
      title: Next Steps
      sections:
      - id: ux-expert-prompt
        title: UX Expert Prompt
        instruction: This section will contain the prompt for the UX Expert, keep
          it short and to the point to initiate create architecture mode using this
          document as input.
      - id: architect-prompt
        title: Architect Prompt
        instruction: This section will contain the prompt for the Architect, keep
          it short and to the point to initiate create architecture mode using this
          document as input.
  project-brief-tmpl:
    template:
      id: project-brief-template-v2
      name: Project Brief
      version: 2.0
      output:
        format: markdown
        filename: docs/brief.md
        title: 'Project Brief: {{project_name}}'
    workflow:
      mode: interactive
      elicitation: advanced-elicitation
      custom_elicitation:
        title: Project Brief Elicitation Actions
        options:
        - Expand section with more specific details
        - Validate against similar successful products
        - Stress test assumptions with edge cases
        - Explore alternative solution approaches
        - Analyze resource/constraint trade-offs
        - Generate risk mitigation strategies
        - Challenge scope from MVP minimalist view
        - Brainstorm creative feature possibilities
        - If only we had [resource/capability/time]...
        - Proceed to next section
    sections:
    - id: introduction
      instruction: 'This template guides creation of a comprehensive Project Brief
        that serves as the foundational input for product developroduct-managerent.


        Start by asking the user which mode they prefer:


        1. **Interactive Mode** - Work through each section collaboratively

        2. **YOLO Mode** - Generate complete draft for review and refinement


        Before beginning, understand what inputs are available (brainstorming results,
        market research, competitive analysis, initial ideas) and gather project context.

        '
    - id: executive-summary
      title: Executive Summary
      instruction: 'Create a concise overview that captures the essence of the project.
        Include:

        - Product concept in 1-2 sentences

        - Primary problem being solved

        - Target market identification

        - Key value proposition

        '
      template: '{{executive_summary_content}}'
    - id: problem-statement
      title: Problem Statement
      instruction: 'Articulate the problem with clarity and evidence. Address:

        - Current state and pain points

        - Impact of the problem (quantify if possible)

        - Why existing solutions fall short

        - Urgency and importance of solving this now

        '
      template: '{{detailed_problem_description}}'
    - id: proposed-solution
      title: Proposed Solution
      instruction: 'Describe the solution approach at a high level. Include:

        - Core concept and approach

        - Key differentiators from existing solutions

        - Why this solution will succeed where others haven''t

        - High-level vision for the product

        '
      template: '{{solution_description}}'
    - id: target-users
      title: Target Users
      instruction: 'Define and characterize the intended users with specificity. For
        each user segment include:

        - Demographic/firmographic profile

        - Current behaviors and workflows

        - Specific needs and pain points

        - Goals they''re trying to achieve

        '
      sections:
      - id: primary-segment
        title: 'Primary User Segment: {{segment_name}}'
        template: '{{primary_user_description}}'
      - id: secondary-segment
        title: 'Secondary User Segment: {{segment_name}}'
        condition: Has secondary user segment
        template: '{{secondary_user_description}}'
    - id: goals-metrics
      title: Goals & Success Metrics
      instruction: Establish clear objectives and how to measure success. Make goals
        SMART (Specific, Measurable, Achievable, Relevant, Time-bound)
      sections:
      - id: business-objectives
        title: Business Objectives
        type: bullet-list
        template: '- {{objective_with_metric}}'
      - id: user-success-metrics
        title: User Success Metrics
        type: bullet-list
        template: '- {{user_metric}}'
      - id: kpis
        title: Key Performance Indicators (KPIs)
        type: bullet-list
        template: '- {{kpi}}: {{definition_and_target}}'
    - id: mvp-scope
      title: MVP Scope
      instruction: Define the minimum viable product clearly. Be specific about what's
        in and what's out. Help user distinguish must-haves from nice-to-haves.
      sections:
      - id: core-features
        title: Core Features (Must Have)
        type: bullet-list
        template: '- **{{feature}}:** {{description_and_rationale}}'
      - id: out-of-scope
        title: Out of Scope for MVP
        type: bullet-list
        template: '- {{feature_or_capability}}'
      - id: mvp-success-criteria
        title: MVP Success Criteria
        template: '{{mvp_success_definition}}'
    - id: post-mvp-vision
      title: Post-MVP Vision
      instruction: Outline the longer-term product direction without overcommitting
        to specifics
      sections:
      - id: phase-2-features
        title: Phase 2 Features
        template: '{{next_priority_features}}'
      - id: long-term-vision
        title: Long-term Vision
        template: '{{one_two_year_vision}}'
      - id: expansion-opportunities
        title: Expansion Opportunities
        template: '{{potential_expansions}}'
    - id: technical-considerations
      title: Technical Considerations
      instruction: Document known technical constraints and preferences. Note these
        are initial thoughts, not final decisions.
      sections:
      - id: platform-requirements
        title: Platform Requirements
        template: '- **Target Platforms:** {{platforms}}

          - **Browser/OS Support:** {{specific_requirements}}

          - **Performance Requirements:** {{performance_specs}}

          '
      - id: technology-preferences
        title: Technology Preferences
        template: '- **Frontend:** {{frontend_preferences}}

          - **Backend:** {{backend_preferences}}

          - **Database:** {{database_preferences}}

          - **Hosting/Infrastructure:** {{infrastructure_preferences}}

          '
      - id: architecture-considerations
        title: Architecture Considerations
        template: '- **Repository Structure:** {{repo_thoughts}}

          - **Service Architecture:** {{service_thoughts}}

          - **Integration Requirements:** {{integration_needs}}

          - **Security/Compliance:** {{security_requirements}}

          '
    - id: constraints-assumptions
      title: Constraints & Assumptions
      instruction: Clearly state limitations and assumptions to set realistic expectations
      sections:
      - id: constraints
        title: Constraints
        template: '- **Budget:** {{budget_info}}

          - **Timeline:** {{timeline_info}}

          - **Resources:** {{resource_info}}

          - **Technical:** {{technical_constraints}}

          '
      - id: key-assumptions
        title: Key Assumptions
        type: bullet-list
        template: '- {{assumption}}'
    - id: risks-questions
      title: Risks & Open Questions
      instruction: Identify unknowns and potential challenges proactively
      sections:
      - id: key-risks
        title: Key Risks
        type: bullet-list
        template: '- **{{risk}}:** {{description_and_impact}}'
      - id: open-questions
        title: Open Questions
        type: bullet-list
        template: '- {{question}}'
      - id: research-areas
        title: Areas Needing Further Research
        type: bullet-list
        template: '- {{research_topic}}'
    - id: appendices
      title: Appendices
      sections:
      - id: research-summary
        title: A. Research Summary
        condition: Has research findings
        instruction: 'If applicable, summarize key findings from:

          - Market research

          - Competitive analysis

          - User interviews

          - Technical feasibility studies

          '
      - id: stakeholder-input
        title: B. Stakeholder Input
        condition: Has stakeholder feedback
        template: '{{stakeholder_feedback}}'
      - id: references
        title: C. References
        template: '{{relevant_links_and_docs}}'
    - id: next-steps
      title: Next Steps
      sections:
      - id: immediate-actions
        title: Immediate Actions
        type: numbered-list
        template: '{{action_item}}'
      - id: product-manager-handoff
        title: PM Handoff
        content: 'This Project Brief provides the full context for {{project_name}}.
          Please start in ''PRD Generation Mode'', review the brief thoroughly to
          work with the user to create the PRD section by section as the template
          indicates, asking for any necessary clarification or suggesting improvements.

          '
  qa-gate-tmpl:
    template:
      id: qa-gate-template-v1
      name: Quality Gate Decision
      version: 1.0
      output:
        format: yaml
        filename: qa.qaLocation/gates/{{epic_num}}.{{story_num}}-{{story_slug}}.yml
        title: 'Quality Gate: {{epic_num}}.{{story_num}}'
    schema: 1
    story: '{{epic_num}}.{{story_num}}'
    story_title: '{{story_title}}'
    gate: '{{gate_status}}'
    status_reason: '{{status_reason}}'
    reviewer: Quinn (Test Architect)
    updated: '{{iso_timestamp}}'
    waiver:
      active: false
    top_issues: []
    risk_summary:
      totals:
        critical: 0
        high: 0
        medium: 0
        low: 0
      recommendations:
        must_fix: []
        monitor: []
    examples:
      with_issues: "top_issues:\n  - id: \"SEC-001\"\n    severity: high  # ONLY:\
        \ low|medium|high\n    finding: \"No rate limiting on login endpoint\"\n \
        \   suggested_action: \"Add rate limiting middleware before production\"\n\
        \  - id: \"TEST-001\"  \n    severity: medium\n    finding: \"Missing integration\
        \ tests for auth flow\"\n    suggested_action: \"Add test coverage for critical\
        \ paths\"\n"
      when_waived: "waiver:\n  active: true\n  reason: \"Accepted for MVP release\
        \ - will address in next sprint\"\n  approved_by: \"Product Owner\"\n"
    optional_fields_examples:
      quality_and_expiry: 'quality_score: 75  # 0-100 (optional scoring)

        expires: "2025-01-26T00:00:00Z"  # Optional gate freshness window

        '
      evidence: "evidence:\n  tests_reviewed: 15\n  risks_identified: 3\n  trace:\n\
        \    ac_covered: [1, 2, 3]  # AC numbers with test coverage\n    ac_gaps:\
        \ [4]  # AC numbers lacking coverage\n"
      nfr_validation: "nfr_validation:\n  security: { status: CONCERNS, notes: \"\
        Rate limiting missing\" }\n  performance: { status: PASS, notes: \"\" }\n\
        \  reliability: { status: PASS, notes: \"\" }\n  maintainability: { status:\
        \ PASS, notes: \"\" }\n"
      history: "history:  # Append-only audit trail\n  - at: \"2025-01-12T10:00:00Z\"\
        \n    gate: FAIL\n    note: \"Initial review - missing tests\"\n  - at: \"\
        2025-01-12T15:00:00Z\"  \n    gate: CONCERNS\n    note: \"Tests added but\
        \ rate limiting still missing\"\n"
      risk_summary: "risk_summary:  # From risk-profile task\n  totals:\n    critical:\
        \ 0\n    high: 0\n    medium: 0\n    low: 0\n  # 'highest' is emitted only\
        \ when risks exist\n  recommendations:\n    must_fix: []\n    monitor: []\n"
      recommendations: "recommendations:\n  immediate:  # Must fix before production\n\
        \    - action: \"Add rate limiting to auth endpoints\"\n      refs: [\"api/auth/login.ts:42-68\"\
        ]\n  future:  # Can be addressed later\n    - action: \"Consider caching for\
        \ better performance\"\n      refs: [\"services/data.service.ts\"]\n"
  story-tmpl:
    template:
      id: story-template-v2
      name: Story Document
      version: 2.0
      output:
        format: markdown
        filename: docs/stories/{{epic_num}}.{{story_num}}.{{story_title_short}}.md
        title: 'Story {{epic_num}}.{{story_num}}: {{story_title_short}}'
    workflow:
      mode: interactive
      elicitation: advanced-elicitation
    agent_config:
      editable_sections:
      - Status
      - Story
      - Acceptance Criteria
      - Tasks / Subtasks
      - Dev Notes
      - Testing
      - Change Log
    sections:
    - id: status
      title: Status
      type: choice
      choices:
      - Draft
      - Approved
      - InProgress
      - Review
      - Done
      instruction: Select the current status of the story
      owner: scrum-master
      editors:
      - scrum-master
      - dev-agent
    - id: story
      title: Story
      type: template-text
      template: '**As a** {{role}},

        **I want** {{action}},

        **so that** {{benefit}}

        '
      instruction: Define the user story using the standard format with role, action,
        and benefit
      elicit: true
      owner: scrum-master
      editors:
      - scrum-master
    - id: acceptance-criteria
      title: Acceptance Criteria
      type: numbered-list
      instruction: Copy the acceptance criteria numbered list from the epic file
      elicit: true
      owner: scrum-master
      editors:
      - scrum-master
    - id: tasks-subtasks
      title: Tasks / Subtasks
      type: bullet-list
      instruction: 'Break down the story into specific tasks and subtasks needed for
        implementation.

        Reference applicable acceptance criteria numbers where relevant.

        '
      template: "- [ ] Task 1 (AC: # if applicable)\n  - [ ] Subtask1.1...\n- [ ]\
        \ Task 2 (AC: # if applicable)\n  - [ ] Subtask 2.1...\n- [ ] Task 3 (AC:\
        \ # if applicable)\n  - [ ] Subtask 3.1...\n"
      elicit: true
      owner: scrum-master
      editors:
      - scrum-master
      - dev-agent
    - id: dev-notes
      title: Dev Notes
      instruction: 'Populate relevant information, only what was pulled from actual
        artifacts from docs folder, relevant to this story:

        - Do not invent information

        - If known add Relevant Source Tree info that relates to this story

        - If there were important notes from previous story that are relevant to this
        one, include them here

        - Put enough information in this section so that the dev agent should NEVER
        need to read the architecture documents, these notes along with the tasks
        and subtasks must give the Dev Agent the complete context it needs to comprehend
        with the least amount of overhead the information to complete the story, meeting
        all AC and completing all tasks+subtasks

        '
      elicit: true
      owner: scrum-master
      editors:
      - scrum-master
      sections:
      - id: testing-standards
        title: Testing
        instruction: 'List Relevant Testing Standards from Architecture the Developer
          needs to conform to:

          - Test file location

          - Test standards

          - Testing frameworks and patterns to use

          - Any specific testing requirements for this story

          '
        elicit: true
        owner: scrum-master
        editors:
        - scrum-master
    - id: change-log
      title: Change Log
      type: table
      columns:
      - Date
      - Version
      - Description
      - Author
      instruction: Track changes made to this story document
      owner: scrum-master
      editors:
      - scrum-master
      - dev-agent
      - qa-agent
    - id: dev-agent-record
      title: Dev Agent Record
      instruction: This section is populated by the development agent during implementation
      owner: dev-agent
      editors:
      - dev-agent
      sections:
      - id: agent-model
        title: Agent Model Used
        template: '{{agent_model_name_version}}'
        instruction: Record the specific AI agent model and version used for development
        owner: dev-agent
        editors:
        - dev-agent
      - id: debug-log-references
        title: Debug Log References
        instruction: Reference any debug logs or traces generated during development
        owner: dev-agent
        editors:
        - dev-agent
      - id: completion-notes
        title: Completion Notes List
        instruction: Notes about the completion of tasks and any issues encountered
        owner: dev-agent
        editors:
        - dev-agent
      - id: file-list
        title: File List
        instruction: List all files created, modified, or affected during story implementation
        owner: dev-agent
        editors:
        - dev-agent
    - id: qa-results
      title: QA Results
      instruction: Results from QA Agent QA review of the completed story implementation
      owner: qa-agent
      editors:
      - qa-agent
created: '2025-11-01T17:48:43.576171'
total_templates: 13
